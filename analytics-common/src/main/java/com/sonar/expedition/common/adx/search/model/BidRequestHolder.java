/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.sonar.expedition.common.adx.search.model;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BidRequestHolder extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BidRequestHolder\",\"namespace\":\"com.sonar.expedition.common.adx.search.model\",\"fields\":[{\"name\":\"userId\",\"type\":\"string\",\"required\":\"true\"},{\"name\":\"bidRequest\",\"type\":\"bytes\",\"required\":\"true\"},{\"name\":\"timestamp\",\"type\":\"long\",\"required\":\"true\"}]}");
    @Deprecated
    public java.lang.CharSequence userId;
    @Deprecated
    public java.nio.ByteBuffer bidRequest;
    @Deprecated
    public long timestamp;

    /**
     * Default constructor.
     */
    public BidRequestHolder() {
    }

    /**
     * All-args constructor.
     */
    public BidRequestHolder(java.lang.CharSequence userId, java.nio.ByteBuffer bidRequest, java.lang.Long timestamp) {
        this.userId = userId;
        this.bidRequest = bidRequest;
        this.timestamp = timestamp;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return userId;
            case 1:
                return bidRequest;
            case 2:
                return timestamp;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                userId = (java.lang.CharSequence) value$;
                break;
            case 1:
                bidRequest = (java.nio.ByteBuffer) value$;
                break;
            case 2:
                timestamp = (java.lang.Long) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'userId' field.
     */
    public java.lang.CharSequence getUserId() {
        return userId;
    }

    /**
     * Sets the value of the 'userId' field.
     *
     * @param value the value to set.
     */
    public void setUserId(java.lang.CharSequence value) {
        this.userId = value;
    }

    /**
     * Gets the value of the 'bidRequest' field.
     */
    public java.nio.ByteBuffer getBidRequest() {
        return bidRequest;
    }

    /**
     * Sets the value of the 'bidRequest' field.
     *
     * @param value the value to set.
     */
    public void setBidRequest(java.nio.ByteBuffer value) {
        this.bidRequest = value;
    }

    /**
     * Gets the value of the 'timestamp' field.
     */
    public java.lang.Long getTimestamp() {
        return timestamp;
    }

    /**
     * Sets the value of the 'timestamp' field.
     *
     * @param value the value to set.
     */
    public void setTimestamp(java.lang.Long value) {
        this.timestamp = value;
    }

    /**
     * Creates a new BidRequestHolder RecordBuilder
     */
    public static com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder newBuilder() {
        return new com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder();
    }

    /**
     * Creates a new BidRequestHolder RecordBuilder by copying an existing Builder
     */
    public static com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder newBuilder(com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder other) {
        return new com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder(other);
    }

    /**
     * Creates a new BidRequestHolder RecordBuilder by copying an existing BidRequestHolder instance
     */
    public static com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder newBuilder(com.sonar.expedition.common.adx.search.model.BidRequestHolder other) {
        return new com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder(other);
    }

    /**
     * RecordBuilder for BidRequestHolder instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BidRequestHolder>
            implements org.apache.avro.data.RecordBuilder<BidRequestHolder> {

        private java.lang.CharSequence userId;
        private java.nio.ByteBuffer bidRequest;
        private long timestamp;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(com.sonar.expedition.common.adx.search.model.BidRequestHolder.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder
         */
        private Builder(com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder other) {
            super(other);
        }

        /**
         * Creates a Builder by copying an existing BidRequestHolder instance
         */
        private Builder(com.sonar.expedition.common.adx.search.model.BidRequestHolder other) {
            super(com.sonar.expedition.common.adx.search.model.BidRequestHolder.SCHEMA$);
            if (isValidValue(fields()[0], other.userId)) {
                this.userId = data().deepCopy(fields()[0].schema(), other.userId);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.bidRequest)) {
                this.bidRequest = data().deepCopy(fields()[1].schema(), other.bidRequest);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.timestamp)) {
                this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
                fieldSetFlags()[2] = true;
            }
        }

        /**
         * Gets the value of the 'userId' field
         */
        public java.lang.CharSequence getUserId() {
            return userId;
        }

        /**
         * Sets the value of the 'userId' field
         */
        public com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder setUserId(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.userId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set
         */
        public boolean hasUserId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'userId' field
         */
        public com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder clearUserId() {
            userId = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'bidRequest' field
         */
        public java.nio.ByteBuffer getBidRequest() {
            return bidRequest;
        }

        /**
         * Sets the value of the 'bidRequest' field
         */
        public com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder setBidRequest(java.nio.ByteBuffer value) {
            validate(fields()[1], value);
            this.bidRequest = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'bidRequest' field has been set
         */
        public boolean hasBidRequest() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'bidRequest' field
         */
        public com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder clearBidRequest() {
            bidRequest = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'timestamp' field
         */
        public java.lang.Long getTimestamp() {
            return timestamp;
        }

        /**
         * Sets the value of the 'timestamp' field
         */
        public com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder setTimestamp(long value) {
            validate(fields()[2], value);
            this.timestamp = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'timestamp' field has been set
         */
        public boolean hasTimestamp() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'timestamp' field
         */
        public com.sonar.expedition.common.adx.search.model.BidRequestHolder.Builder clearTimestamp() {
            fieldSetFlags()[2] = false;
            return this;
        }

        @Override
        public BidRequestHolder build() {
            try {
                BidRequestHolder record = new BidRequestHolder();
                record.userId = fieldSetFlags()[0] ? this.userId : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.bidRequest = fieldSetFlags()[1] ? this.bidRequest : (java.nio.ByteBuffer) defaultValue(fields()[1]);
                record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
