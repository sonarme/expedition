// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from sonar.proto

package com.sonar.expedition.common.adx.search.model;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class ClickThrough implements Externalizable, Message<ClickThrough> {

    public static Schema<ClickThrough> getSchema() {
        return SCHEMA;
    }

    public static ClickThrough getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final ClickThrough DEFAULT_INSTANCE = new ClickThrough();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String bidId;
    Long timestamp;

    public ClickThrough() {

    }

    public ClickThrough(
            String bidId,
            Long timestamp
    ) {
        this.bidId = bidId;
        this.timestamp = timestamp;
    }

    // getters and setters

    // bidId

    public String getBidId() {
        return bidId;
    }

    public void setBidId(String bidId) {
        this.bidId = bidId;
    }

    // timestamp

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ClickThrough> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<ClickThrough> SCHEMA = new Schema<ClickThrough>() {
        // schema methods

        public ClickThrough newMessage() {
            return new ClickThrough();
        }

        public Class<ClickThrough> typeClass() {
            return ClickThrough.class;
        }

        public String messageName() {
            return ClickThrough.class.getSimpleName();
        }

        public String messageFullName() {
            return ClickThrough.class.getName();
        }

        public boolean isInitialized(ClickThrough message) {
            return
                    message.bidId != null
                            && message.timestamp != null;
        }

        public void mergeFrom(Input input, ClickThrough message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.bidId = input.readString();
                        break;
                    case 2:
                        message.timestamp = input.readInt64();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, ClickThrough message) throws IOException {
            if (message.bidId == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.bidId, false);

            if (message.timestamp == null)
                throw new UninitializedMessageException(message);
            output.writeInt64(2, message.timestamp, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "bidId";
                case 2:
                    return "timestamp";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("bidId", 1);
            fieldMap.put("timestamp", 2);
        }
    };

}
