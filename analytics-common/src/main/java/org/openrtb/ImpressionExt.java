// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ImpressionExt implements Externalizable, Message<ImpressionExt> {

    public static Schema<ImpressionExt> getSchema() {
        return SCHEMA;
    }

    public static ImpressionExt getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final ImpressionExt DEFAULT_INSTANCE = new ImpressionExt();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Bool strictbannersize;

    public ImpressionExt() {

    }

    // getters and setters

    // strictbannersize

    public Bool getStrictbannersize() {
        return strictbannersize == null ? Bool.FALSE : strictbannersize;
    }

    public void setStrictbannersize(Bool strictbannersize) {
        this.strictbannersize = strictbannersize;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ImpressionExt> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<ImpressionExt> SCHEMA = new Schema<ImpressionExt>() {
        // schema methods

        public ImpressionExt newMessage() {
            return new ImpressionExt();
        }

        public Class<ImpressionExt> typeClass() {
            return ImpressionExt.class;
        }

        public String messageName() {
            return ImpressionExt.class.getSimpleName();
        }

        public String messageFullName() {
            return ImpressionExt.class.getName();
        }

        public boolean isInitialized(ImpressionExt message) {
            return true;
        }

        public void mergeFrom(Input input, ImpressionExt message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.strictbannersize = Bool.valueOf(input.readEnum());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, ImpressionExt message) throws IOException {
            if (message.strictbannersize != null)
                output.writeEnum(1, message.strictbannersize.number, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "strictbannersize";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("strictbannersize", 1);
        }
    };

}
