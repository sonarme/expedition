// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Video implements Externalizable, Message<Video> {

    public static Schema<Video> getSchema() {
        return SCHEMA;
    }

    public static Video getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Video DEFAULT_INSTANCE = new Video();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    List<String> mimes;
    VideoLinearity linearity;
    Integer minduration;
    Integer maxduration;
    VideoProtocol protocol;
    Integer w;
    Integer h;
    VideoStartDelay startdelay;
    Integer sequence;
    List<CreativeAttribute> battr;
    Integer maxextended;
    Integer minbitrate;
    Integer maxbitrate;
    Bool boxingallowed;
    List<VideoPlaybackMethod> playbackmethod;
    List<ContentDeliveryMethod> delivery;
    AdPosition pos;
    List<Banner> companionad;

    public Video() {

    }

    public Video(
            VideoLinearity linearity,
            Integer minduration,
            Integer maxduration,
            VideoProtocol protocol
    ) {
        this.linearity = linearity;
        this.minduration = minduration;
        this.maxduration = maxduration;
        this.protocol = protocol;
    }

    // getters and setters

    // mimes

    public List<String> getMimesList() {
        return mimes;
    }

    public void setMimesList(List<String> mimes) {
        this.mimes = mimes;
    }

    // linearity

    public VideoLinearity getLinearity() {
        return linearity;
    }

    public void setLinearity(VideoLinearity linearity) {
        this.linearity = linearity;
    }

    // minduration

    public Integer getMinduration() {
        return minduration;
    }

    public void setMinduration(Integer minduration) {
        this.minduration = minduration;
    }

    // maxduration

    public Integer getMaxduration() {
        return maxduration;
    }

    public void setMaxduration(Integer maxduration) {
        this.maxduration = maxduration;
    }

    // protocol

    public VideoProtocol getProtocol() {
        return protocol;
    }

    public void setProtocol(VideoProtocol protocol) {
        this.protocol = protocol;
    }

    // w

    public Integer getW() {
        return w;
    }

    public void setW(Integer w) {
        this.w = w;
    }

    // h

    public Integer getH() {
        return h;
    }

    public void setH(Integer h) {
        this.h = h;
    }

    // startdelay

    public VideoStartDelay getStartdelay() {
        return startdelay == null ? VideoStartDelay.VIDEO_START_DELAY_PRE_ROLL : startdelay;
    }

    public void setStartdelay(VideoStartDelay startdelay) {
        this.startdelay = startdelay;
    }

    // sequence

    public Integer getSequence() {
        return sequence;
    }

    public void setSequence(Integer sequence) {
        this.sequence = sequence;
    }

    // battr

    public List<CreativeAttribute> getBattrList() {
        return battr;
    }

    public void setBattrList(List<CreativeAttribute> battr) {
        this.battr = battr;
    }

    // maxextended

    public Integer getMaxextended() {
        return maxextended;
    }

    public void setMaxextended(Integer maxextended) {
        this.maxextended = maxextended;
    }

    // minbitrate

    public Integer getMinbitrate() {
        return minbitrate;
    }

    public void setMinbitrate(Integer minbitrate) {
        this.minbitrate = minbitrate;
    }

    // maxbitrate

    public Integer getMaxbitrate() {
        return maxbitrate;
    }

    public void setMaxbitrate(Integer maxbitrate) {
        this.maxbitrate = maxbitrate;
    }

    // boxingallowed

    public Bool getBoxingallowed() {
        return boxingallowed == null ? Bool.FALSE : boxingallowed;
    }

    public void setBoxingallowed(Bool boxingallowed) {
        this.boxingallowed = boxingallowed;
    }

    // playbackmethod

    public List<VideoPlaybackMethod> getPlaybackmethodList() {
        return playbackmethod;
    }

    public void setPlaybackmethodList(List<VideoPlaybackMethod> playbackmethod) {
        this.playbackmethod = playbackmethod;
    }

    // delivery

    public List<ContentDeliveryMethod> getDeliveryList() {
        return delivery;
    }

    public void setDeliveryList(List<ContentDeliveryMethod> delivery) {
        this.delivery = delivery;
    }

    // pos

    public AdPosition getPos() {
        return pos == null ? AdPosition.AD_POSITION_UNKNOWN : pos;
    }

    public void setPos(AdPosition pos) {
        this.pos = pos;
    }

    // companionad

    public List<Banner> getCompanionadList() {
        return companionad;
    }

    public void setCompanionadList(List<Banner> companionad) {
        this.companionad = companionad;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Video> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Video> SCHEMA = new Schema<Video>() {
        // schema methods

        public Video newMessage() {
            return new Video();
        }

        public Class<Video> typeClass() {
            return Video.class;
        }

        public String messageName() {
            return Video.class.getSimpleName();
        }

        public String messageFullName() {
            return Video.class.getName();
        }

        public boolean isInitialized(Video message) {
            return
                    message.linearity != null
                            && message.minduration != null
                            && message.maxduration != null
                            && message.protocol != null;
        }

        public void mergeFrom(Input input, Video message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        if (message.mimes == null)
                            message.mimes = new ArrayList<String>();
                        message.mimes.add(input.readString());
                        break;
                    case 2:
                        message.linearity = VideoLinearity.valueOf(input.readEnum());
                        break;
                    case 3:
                        message.minduration = input.readInt32();
                        break;
                    case 4:
                        message.maxduration = input.readInt32();
                        break;
                    case 5:
                        message.protocol = VideoProtocol.valueOf(input.readEnum());
                        break;
                    case 6:
                        message.w = input.readInt32();
                        break;
                    case 7:
                        message.h = input.readInt32();
                        break;
                    case 8:
                        message.startdelay = VideoStartDelay.valueOf(input.readEnum());
                        break;
                    case 9:
                        message.sequence = input.readInt32();
                        break;
                    case 10:
                        if (message.battr == null)
                            message.battr = new ArrayList<CreativeAttribute>();
                        message.battr.add(CreativeAttribute.valueOf(input.readEnum()));
                        break;
                    case 11:
                        message.maxextended = input.readInt32();
                        break;
                    case 12:
                        message.minbitrate = input.readInt32();
                        break;
                    case 13:
                        message.maxbitrate = input.readInt32();
                        break;
                    case 14:
                        message.boxingallowed = Bool.valueOf(input.readEnum());
                        break;
                    case 15:
                        if (message.playbackmethod == null)
                            message.playbackmethod = new ArrayList<VideoPlaybackMethod>();
                        message.playbackmethod.add(VideoPlaybackMethod.valueOf(input.readEnum()));
                        break;
                    case 16:
                        if (message.delivery == null)
                            message.delivery = new ArrayList<ContentDeliveryMethod>();
                        message.delivery.add(ContentDeliveryMethod.valueOf(input.readEnum()));
                        break;
                    case 17:
                        message.pos = AdPosition.valueOf(input.readEnum());
                        break;
                    case 18:
                        if (message.companionad == null)
                            message.companionad = new ArrayList<Banner>();
                        message.companionad.add(input.mergeObject(null, Banner.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Video message) throws IOException {
            if (message.mimes != null) {
                for (String mimes : message.mimes) {
                    if (mimes != null)
                        output.writeString(1, mimes, true);
                }
            }

            if (message.linearity == null)
                throw new UninitializedMessageException(message);
            output.writeEnum(2, message.linearity.number, false);

            if (message.minduration == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(3, message.minduration, false);

            if (message.maxduration == null)
                throw new UninitializedMessageException(message);
            output.writeInt32(4, message.maxduration, false);

            if (message.protocol == null)
                throw new UninitializedMessageException(message);
            output.writeEnum(5, message.protocol.number, false);

            if (message.w != null)
                output.writeInt32(6, message.w, false);

            if (message.h != null)
                output.writeInt32(7, message.h, false);

            if (message.startdelay != null)
                output.writeEnum(8, message.startdelay.number, false);

            if (message.sequence != null)
                output.writeInt32(9, message.sequence, false);

            if (message.battr != null) {
                for (CreativeAttribute battr : message.battr) {
                    if (battr != null)
                        output.writeEnum(10, battr.number, true);
                }
            }

            if (message.maxextended != null)
                output.writeInt32(11, message.maxextended, false);

            if (message.minbitrate != null)
                output.writeInt32(12, message.minbitrate, false);

            if (message.maxbitrate != null)
                output.writeInt32(13, message.maxbitrate, false);

            if (message.boxingallowed != null)
                output.writeEnum(14, message.boxingallowed.number, false);

            if (message.playbackmethod != null) {
                for (VideoPlaybackMethod playbackmethod : message.playbackmethod) {
                    if (playbackmethod != null)
                        output.writeEnum(15, playbackmethod.number, true);
                }
            }

            if (message.delivery != null) {
                for (ContentDeliveryMethod delivery : message.delivery) {
                    if (delivery != null)
                        output.writeEnum(16, delivery.number, true);
                }
            }

            if (message.pos != null)
                output.writeEnum(17, message.pos.number, false);

            if (message.companionad != null) {
                for (Banner companionad : message.companionad) {
                    if (companionad != null)
                        output.writeObject(18, companionad, Banner.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "mimes";
                case 2:
                    return "linearity";
                case 3:
                    return "minduration";
                case 4:
                    return "maxduration";
                case 5:
                    return "protocol";
                case 6:
                    return "w";
                case 7:
                    return "h";
                case 8:
                    return "startdelay";
                case 9:
                    return "sequence";
                case 10:
                    return "battr";
                case 11:
                    return "maxextended";
                case 12:
                    return "minbitrate";
                case 13:
                    return "maxbitrate";
                case 14:
                    return "boxingallowed";
                case 15:
                    return "playbackmethod";
                case 16:
                    return "delivery";
                case 17:
                    return "pos";
                case 18:
                    return "companionad";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("mimes", 1);
            fieldMap.put("linearity", 2);
            fieldMap.put("minduration", 3);
            fieldMap.put("maxduration", 4);
            fieldMap.put("protocol", 5);
            fieldMap.put("w", 6);
            fieldMap.put("h", 7);
            fieldMap.put("startdelay", 8);
            fieldMap.put("sequence", 9);
            fieldMap.put("battr", 10);
            fieldMap.put("maxextended", 11);
            fieldMap.put("minbitrate", 12);
            fieldMap.put("maxbitrate", 13);
            fieldMap.put("boxingallowed", 14);
            fieldMap.put("playbackmethod", 15);
            fieldMap.put("delivery", 16);
            fieldMap.put("pos", 17);
            fieldMap.put("companionad", 18);
        }
    };

}
