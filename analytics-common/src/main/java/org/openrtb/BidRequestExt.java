// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class BidRequestExt implements Externalizable, Message<BidRequestExt> {

    public static Schema<BidRequestExt> getSchema() {
        return SCHEMA;
    }

    public static BidRequestExt getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final BidRequestExt DEFAULT_INSTANCE = new BidRequestExt();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    UDI udi;

    public BidRequestExt() {

    }

    // getters and setters

    // udi

    public UDI getUdi() {
        return udi;
    }

    public void setUdi(UDI udi) {
        this.udi = udi;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<BidRequestExt> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<BidRequestExt> SCHEMA = new Schema<BidRequestExt>() {
        // schema methods

        public BidRequestExt newMessage() {
            return new BidRequestExt();
        }

        public Class<BidRequestExt> typeClass() {
            return BidRequestExt.class;
        }

        public String messageName() {
            return BidRequestExt.class.getSimpleName();
        }

        public String messageFullName() {
            return BidRequestExt.class.getName();
        }

        public boolean isInitialized(BidRequestExt message) {
            return true;
        }

        public void mergeFrom(Input input, BidRequestExt message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.udi = input.mergeObject(message.udi, UDI.getSchema());
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, BidRequestExt message) throws IOException {
            if (message.udi != null)
                output.writeObject(1, message.udi, UDI.getSchema(), false);

        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "udi";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("udi", 1);
        }
    };

}
