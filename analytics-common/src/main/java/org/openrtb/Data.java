// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Data implements Externalizable, Message<Data> {

    public static Schema<Data> getSchema() {
        return SCHEMA;
    }

    public static Data getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Data DEFAULT_INSTANCE = new Data();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String id;
    String name;
    List<Segment> segment;

    public Data() {

    }

    // getters and setters

    // id

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    // name

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // segment

    public List<Segment> getSegmentList() {
        return segment;
    }

    public void setSegmentList(List<Segment> segment) {
        this.segment = segment;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Data> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Data> SCHEMA = new Schema<Data>() {
        // schema methods

        public Data newMessage() {
            return new Data();
        }

        public Class<Data> typeClass() {
            return Data.class;
        }

        public String messageName() {
            return Data.class.getSimpleName();
        }

        public String messageFullName() {
            return Data.class.getName();
        }

        public boolean isInitialized(Data message) {
            return true;
        }

        public void mergeFrom(Input input, Data message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readString();
                        break;
                    case 2:
                        message.name = input.readString();
                        break;
                    case 3:
                        if (message.segment == null)
                            message.segment = new ArrayList<Segment>();
                        message.segment.add(input.mergeObject(null, Segment.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Data message) throws IOException {
            if (message.id != null)
                output.writeString(1, message.id, false);

            if (message.name != null)
                output.writeString(2, message.name, false);

            if (message.segment != null) {
                for (Segment segment : message.segment) {
                    if (segment != null)
                        output.writeObject(3, segment, Segment.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "id";
                case 2:
                    return "name";
                case 3:
                    return "segment";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("id", 1);
            fieldMap.put("name", 2);
            fieldMap.put("segment", 3);
        }
    };

}
