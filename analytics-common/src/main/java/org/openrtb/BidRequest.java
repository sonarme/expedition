// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class BidRequest implements Externalizable, Message<BidRequest> {

    public static Schema<BidRequest> getSchema() {
        return SCHEMA;
    }

    public static BidRequest getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final BidRequest DEFAULT_INSTANCE = new BidRequest();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String id;
    List<Impression> imp;
    Site site;
    App app;
    Device device;
    User user;
    Integer at;
    Integer tmax;
    List<String> wseat;
    Bool allimps;
    List<String> cur;
    List<String> bcat;
    List<String> badv;
    ByteString ext;

    public BidRequest() {

    }

    public BidRequest(
            String id
    ) {
        this.id = id;
    }

    // getters and setters

    // id

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    // imp

    public List<Impression> getImpList() {
        return imp;
    }

    public void setImpList(List<Impression> imp) {
        this.imp = imp;
    }

    // site

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    // app

    public App getApp() {
        return app;
    }

    public void setApp(App app) {
        this.app = app;
    }

    // device

    public Device getDevice() {
        return device;
    }

    public void setDevice(Device device) {
        this.device = device;
    }

    // user

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    // at

    public Integer getAt() {
        return at;
    }

    public void setAt(Integer at) {
        this.at = at;
    }

    // tmax

    public Integer getTmax() {
        return tmax;
    }

    public void setTmax(Integer tmax) {
        this.tmax = tmax;
    }

    // wseat

    public List<String> getWseatList() {
        return wseat;
    }

    public void setWseatList(List<String> wseat) {
        this.wseat = wseat;
    }

    // allimps

    public Bool getAllimps() {
        return allimps == null ? Bool.FALSE : allimps;
    }

    public void setAllimps(Bool allimps) {
        this.allimps = allimps;
    }

    // cur

    public List<String> getCurList() {
        return cur;
    }

    public void setCurList(List<String> cur) {
        this.cur = cur;
    }

    // bcat

    public List<String> getBcatList() {
        return bcat;
    }

    public void setBcatList(List<String> bcat) {
        this.bcat = bcat;
    }

    // badv

    public List<String> getBadvList() {
        return badv;
    }

    public void setBadvList(List<String> badv) {
        this.badv = badv;
    }

    // ext

    public ByteString getExt() {
        return ext;
    }

    public void setExt(ByteString ext) {
        this.ext = ext;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<BidRequest> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<BidRequest> SCHEMA = new Schema<BidRequest>() {
        // schema methods

        public BidRequest newMessage() {
            return new BidRequest();
        }

        public Class<BidRequest> typeClass() {
            return BidRequest.class;
        }

        public String messageName() {
            return BidRequest.class.getSimpleName();
        }

        public String messageFullName() {
            return BidRequest.class.getName();
        }

        public boolean isInitialized(BidRequest message) {
            return
                    message.id != null;
        }

        public void mergeFrom(Input input, BidRequest message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readString();
                        break;
                    case 2:
                        if (message.imp == null)
                            message.imp = new ArrayList<Impression>();
                        message.imp.add(input.mergeObject(null, Impression.getSchema()));
                        break;

                    case 3:
                        message.site = input.mergeObject(message.site, Site.getSchema());
                        break;

                    case 4:
                        message.app = input.mergeObject(message.app, App.getSchema());
                        break;

                    case 5:
                        message.device = input.mergeObject(message.device, Device.getSchema());
                        break;

                    case 6:
                        message.user = input.mergeObject(message.user, User.getSchema());
                        break;

                    case 7:
                        message.at = input.readInt32();
                        break;
                    case 8:
                        message.tmax = input.readInt32();
                        break;
                    case 9:
                        if (message.wseat == null)
                            message.wseat = new ArrayList<String>();
                        message.wseat.add(input.readString());
                        break;
                    case 10:
                        message.allimps = Bool.valueOf(input.readEnum());
                        break;
                    case 11:
                        if (message.cur == null)
                            message.cur = new ArrayList<String>();
                        message.cur.add(input.readString());
                        break;
                    case 12:
                        if (message.bcat == null)
                            message.bcat = new ArrayList<String>();
                        message.bcat.add(input.readString());
                        break;
                    case 13:
                        if (message.badv == null)
                            message.badv = new ArrayList<String>();
                        message.badv.add(input.readString());
                        break;
                    case 14:
                        message.ext = input.readBytes();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, BidRequest message) throws IOException {
            if (message.id == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.id, false);

            if (message.imp != null) {
                for (Impression imp : message.imp) {
                    if (imp != null)
                        output.writeObject(2, imp, Impression.getSchema(), true);
                }
            }


            if (message.site != null)
                output.writeObject(3, message.site, Site.getSchema(), false);


            if (message.app != null)
                output.writeObject(4, message.app, App.getSchema(), false);


            if (message.device != null)
                output.writeObject(5, message.device, Device.getSchema(), false);


            if (message.user != null)
                output.writeObject(6, message.user, User.getSchema(), false);


            if (message.at != null)
                output.writeInt32(7, message.at, false);

            if (message.tmax != null)
                output.writeInt32(8, message.tmax, false);

            if (message.wseat != null) {
                for (String wseat : message.wseat) {
                    if (wseat != null)
                        output.writeString(9, wseat, true);
                }
            }

            if (message.allimps != null)
                output.writeEnum(10, message.allimps.number, false);

            if (message.cur != null) {
                for (String cur : message.cur) {
                    if (cur != null)
                        output.writeString(11, cur, true);
                }
            }

            if (message.bcat != null) {
                for (String bcat : message.bcat) {
                    if (bcat != null)
                        output.writeString(12, bcat, true);
                }
            }

            if (message.badv != null) {
                for (String badv : message.badv) {
                    if (badv != null)
                        output.writeString(13, badv, true);
                }
            }

            if (message.ext != null)
                output.writeBytes(14, message.ext, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "id";
                case 2:
                    return "imp";
                case 3:
                    return "site";
                case 4:
                    return "app";
                case 5:
                    return "device";
                case 6:
                    return "user";
                case 7:
                    return "at";
                case 8:
                    return "tmax";
                case 9:
                    return "wseat";
                case 10:
                    return "allimps";
                case 11:
                    return "cur";
                case 12:
                    return "bcat";
                case 13:
                    return "badv";
                case 14:
                    return "ext";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("id", 1);
            fieldMap.put("imp", 2);
            fieldMap.put("site", 3);
            fieldMap.put("app", 4);
            fieldMap.put("device", 5);
            fieldMap.put("user", 6);
            fieldMap.put("at", 7);
            fieldMap.put("tmax", 8);
            fieldMap.put("wseat", 9);
            fieldMap.put("allimps", 10);
            fieldMap.put("cur", 11);
            fieldMap.put("bcat", 12);
            fieldMap.put("badv", 13);
            fieldMap.put("ext", 14);
        }
    };

}
