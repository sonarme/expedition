// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb.mobile;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class SeatBid implements Externalizable, Message<SeatBid> {

    public static Schema<SeatBid> getSchema() {
        return SCHEMA;
    }

    public static SeatBid getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final SeatBid DEFAULT_INSTANCE = new SeatBid();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String seat;
    Integer group;
    List<Bid> bid;

    public SeatBid() {

    }

    // getters and setters

    // seat

    public String getSeat() {
        return seat;
    }

    public void setSeat(String seat) {
        this.seat = seat;
    }

    // group

    public Integer getGroup() {
        return group;
    }

    public void setGroup(Integer group) {
        this.group = group;
    }

    // bid

    public List<Bid> getBidList() {
        return bid;
    }

    public void setBidList(List<Bid> bid) {
        this.bid = bid;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<SeatBid> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<SeatBid> SCHEMA = new Schema<SeatBid>() {
        // schema methods

        public SeatBid newMessage() {
            return new SeatBid();
        }

        public Class<SeatBid> typeClass() {
            return SeatBid.class;
        }

        public String messageName() {
            return SeatBid.class.getSimpleName();
        }

        public String messageFullName() {
            return SeatBid.class.getName();
        }

        public boolean isInitialized(SeatBid message) {
            return true;
        }

        public void mergeFrom(Input input, SeatBid message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.seat = input.readString();
                        break;
                    case 2:
                        message.group = input.readInt32();
                        break;
                    case 3:
                        if (message.bid == null)
                            message.bid = new ArrayList<Bid>();
                        message.bid.add(input.mergeObject(null, Bid.getSchema()));
                        break;

                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, SeatBid message) throws IOException {
            if (message.seat != null)
                output.writeString(1, message.seat, false);

            if (message.group != null)
                output.writeInt32(2, message.group, false);

            if (message.bid != null) {
                for (Bid bid : message.bid) {
                    if (bid != null)
                        output.writeObject(3, bid, Bid.getSchema(), true);
                }
            }

        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "seat";
                case 2:
                    return "group";
                case 3:
                    return "bid";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("seat", 1);
            fieldMap.put("group", 2);
            fieldMap.put("bid", 3);
        }
    };

}
