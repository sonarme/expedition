// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb.mobile;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class User implements Externalizable, Message<User> {

    public static Schema<User> getSchema() {
        return SCHEMA;
    }

    public static User getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final User DEFAULT_INSTANCE = new User();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String uid;
    Integer yob;
    String gender;
    String zip;
    String country;
    String keywords;

    public User() {

    }

    // getters and setters

    // uid

    public String getUid() {
        return uid;
    }

    public void setUid(String uid) {
        this.uid = uid;
    }

    // yob

    public Integer getYob() {
        return yob;
    }

    public void setYob(Integer yob) {
        this.yob = yob;
    }

    // gender

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    // zip

    public String getZip() {
        return zip;
    }

    public void setZip(String zip) {
        this.zip = zip;
    }

    // country

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    // keywords

    public String getKeywords() {
        return keywords;
    }

    public void setKeywords(String keywords) {
        this.keywords = keywords;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<User> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<User> SCHEMA = new Schema<User>() {
        // schema methods

        public User newMessage() {
            return new User();
        }

        public Class<User> typeClass() {
            return User.class;
        }

        public String messageName() {
            return User.class.getSimpleName();
        }

        public String messageFullName() {
            return User.class.getName();
        }

        public boolean isInitialized(User message) {
            return true;
        }

        public void mergeFrom(Input input, User message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.uid = input.readString();
                        break;
                    case 2:
                        message.yob = input.readInt32();
                        break;
                    case 3:
                        message.gender = input.readString();
                        break;
                    case 4:
                        message.zip = input.readString();
                        break;
                    case 5:
                        message.country = input.readString();
                        break;
                    case 6:
                        message.keywords = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, User message) throws IOException {
            if (message.uid != null)
                output.writeString(1, message.uid, false);

            if (message.yob != null)
                output.writeInt32(2, message.yob, false);

            if (message.gender != null)
                output.writeString(3, message.gender, false);

            if (message.zip != null)
                output.writeString(4, message.zip, false);

            if (message.country != null)
                output.writeString(5, message.country, false);

            if (message.keywords != null)
                output.writeString(6, message.keywords, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "uid";
                case 2:
                    return "yob";
                case 3:
                    return "gender";
                case 4:
                    return "zip";
                case 5:
                    return "country";
                case 6:
                    return "keywords";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("uid", 1);
            fieldMap.put("yob", 2);
            fieldMap.put("gender", 3);
            fieldMap.put("zip", 4);
            fieldMap.put("country", 5);
            fieldMap.put("keywords", 6);
        }
    };

}
