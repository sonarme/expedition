/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.openrtb.mobile;

@SuppressWarnings("all")
/** User Object used in Bid Request from OpenRTB Mobile 1.0 Spec */
@org.apache.avro.specific.AvroGenerated
public class User extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"User\",\"namespace\":\"org.openrtb.mobile\",\"doc\":\"User Object used in Bid Request from OpenRTB Mobile 1.0 Spec\",\"fields\":[{\"name\":\"uid\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Unique consumer ID of this user on the exchange.\"},{\"name\":\"yob\",\"type\":[\"int\",\"null\"],\"required\":\"false\",\"comment\":\"Year of birth as a 4-digit integer.\"},{\"name\":\"gender\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Gender as 'M' male, 'F' female, 'O' other.\"},{\"name\":\"zip\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Home zip code if USA; else postal code.\"},{\"name\":\"country\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Home country; using ISO-3166-1 Alpha-3.\"},{\"name\":\"keywords\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Comma separated list of keywords of consumer interests or intent.\"}]}");
    @Deprecated
    public java.lang.CharSequence uid;
    @Deprecated
    public java.lang.Integer yob;
    @Deprecated
    public java.lang.CharSequence gender;
    @Deprecated
    public java.lang.CharSequence zip;
    @Deprecated
    public java.lang.CharSequence country;
    @Deprecated
    public java.lang.CharSequence keywords;

    /**
     * Default constructor.
     */
    public User() {
    }

    /**
     * All-args constructor.
     */
    public User(java.lang.CharSequence uid, java.lang.Integer yob, java.lang.CharSequence gender, java.lang.CharSequence zip, java.lang.CharSequence country, java.lang.CharSequence keywords) {
        this.uid = uid;
        this.yob = yob;
        this.gender = gender;
        this.zip = zip;
        this.country = country;
        this.keywords = keywords;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return uid;
            case 1:
                return yob;
            case 2:
                return gender;
            case 3:
                return zip;
            case 4:
                return country;
            case 5:
                return keywords;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                uid = (java.lang.CharSequence) value$;
                break;
            case 1:
                yob = (java.lang.Integer) value$;
                break;
            case 2:
                gender = (java.lang.CharSequence) value$;
                break;
            case 3:
                zip = (java.lang.CharSequence) value$;
                break;
            case 4:
                country = (java.lang.CharSequence) value$;
                break;
            case 5:
                keywords = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'uid' field.
     */
    public java.lang.CharSequence getUid() {
        return uid;
    }

    /**
     * Sets the value of the 'uid' field.
     *
     * @param value the value to set.
     */
    public void setUid(java.lang.CharSequence value) {
        this.uid = value;
    }

    /**
     * Gets the value of the 'yob' field.
     */
    public java.lang.Integer getYob() {
        return yob;
    }

    /**
     * Sets the value of the 'yob' field.
     *
     * @param value the value to set.
     */
    public void setYob(java.lang.Integer value) {
        this.yob = value;
    }

    /**
     * Gets the value of the 'gender' field.
     */
    public java.lang.CharSequence getGender() {
        return gender;
    }

    /**
     * Sets the value of the 'gender' field.
     *
     * @param value the value to set.
     */
    public void setGender(java.lang.CharSequence value) {
        this.gender = value;
    }

    /**
     * Gets the value of the 'zip' field.
     */
    public java.lang.CharSequence getZip() {
        return zip;
    }

    /**
     * Sets the value of the 'zip' field.
     *
     * @param value the value to set.
     */
    public void setZip(java.lang.CharSequence value) {
        this.zip = value;
    }

    /**
     * Gets the value of the 'country' field.
     */
    public java.lang.CharSequence getCountry() {
        return country;
    }

    /**
     * Sets the value of the 'country' field.
     *
     * @param value the value to set.
     */
    public void setCountry(java.lang.CharSequence value) {
        this.country = value;
    }

    /**
     * Gets the value of the 'keywords' field.
     */
    public java.lang.CharSequence getKeywords() {
        return keywords;
    }

    /**
     * Sets the value of the 'keywords' field.
     *
     * @param value the value to set.
     */
    public void setKeywords(java.lang.CharSequence value) {
        this.keywords = value;
    }

    /**
     * Creates a new User RecordBuilder
     */
    public static org.openrtb.mobile.User.Builder newBuilder() {
        return new org.openrtb.mobile.User.Builder();
    }

    /**
     * Creates a new User RecordBuilder by copying an existing Builder
     */
    public static org.openrtb.mobile.User.Builder newBuilder(org.openrtb.mobile.User.Builder other) {
        return new org.openrtb.mobile.User.Builder(other);
    }

    /**
     * Creates a new User RecordBuilder by copying an existing User instance
     */
    public static org.openrtb.mobile.User.Builder newBuilder(org.openrtb.mobile.User other) {
        return new org.openrtb.mobile.User.Builder(other);
    }

    /**
     * RecordBuilder for User instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<User>
            implements org.apache.avro.data.RecordBuilder<User> {

        private java.lang.CharSequence uid;
        private java.lang.Integer yob;
        private java.lang.CharSequence gender;
        private java.lang.CharSequence zip;
        private java.lang.CharSequence country;
        private java.lang.CharSequence keywords;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(org.openrtb.mobile.User.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder
         */
        private Builder(org.openrtb.mobile.User.Builder other) {
            super(other);
        }

        /**
         * Creates a Builder by copying an existing User instance
         */
        private Builder(org.openrtb.mobile.User other) {
            super(org.openrtb.mobile.User.SCHEMA$);
            if (isValidValue(fields()[0], other.uid)) {
                this.uid = data().deepCopy(fields()[0].schema(), other.uid);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.yob)) {
                this.yob = data().deepCopy(fields()[1].schema(), other.yob);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.gender)) {
                this.gender = data().deepCopy(fields()[2].schema(), other.gender);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.zip)) {
                this.zip = data().deepCopy(fields()[3].schema(), other.zip);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.country)) {
                this.country = data().deepCopy(fields()[4].schema(), other.country);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.keywords)) {
                this.keywords = data().deepCopy(fields()[5].schema(), other.keywords);
                fieldSetFlags()[5] = true;
            }
        }

        /**
         * Gets the value of the 'uid' field
         */
        public java.lang.CharSequence getUid() {
            return uid;
        }

        /**
         * Sets the value of the 'uid' field
         */
        public org.openrtb.mobile.User.Builder setUid(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.uid = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'uid' field has been set
         */
        public boolean hasUid() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'uid' field
         */
        public org.openrtb.mobile.User.Builder clearUid() {
            uid = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'yob' field
         */
        public java.lang.Integer getYob() {
            return yob;
        }

        /**
         * Sets the value of the 'yob' field
         */
        public org.openrtb.mobile.User.Builder setYob(java.lang.Integer value) {
            validate(fields()[1], value);
            this.yob = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'yob' field has been set
         */
        public boolean hasYob() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'yob' field
         */
        public org.openrtb.mobile.User.Builder clearYob() {
            yob = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'gender' field
         */
        public java.lang.CharSequence getGender() {
            return gender;
        }

        /**
         * Sets the value of the 'gender' field
         */
        public org.openrtb.mobile.User.Builder setGender(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.gender = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'gender' field has been set
         */
        public boolean hasGender() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'gender' field
         */
        public org.openrtb.mobile.User.Builder clearGender() {
            gender = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'zip' field
         */
        public java.lang.CharSequence getZip() {
            return zip;
        }

        /**
         * Sets the value of the 'zip' field
         */
        public org.openrtb.mobile.User.Builder setZip(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.zip = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'zip' field has been set
         */
        public boolean hasZip() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'zip' field
         */
        public org.openrtb.mobile.User.Builder clearZip() {
            zip = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'country' field
         */
        public java.lang.CharSequence getCountry() {
            return country;
        }

        /**
         * Sets the value of the 'country' field
         */
        public org.openrtb.mobile.User.Builder setCountry(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.country = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'country' field has been set
         */
        public boolean hasCountry() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'country' field
         */
        public org.openrtb.mobile.User.Builder clearCountry() {
            country = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'keywords' field
         */
        public java.lang.CharSequence getKeywords() {
            return keywords;
        }

        /**
         * Sets the value of the 'keywords' field
         */
        public org.openrtb.mobile.User.Builder setKeywords(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.keywords = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'keywords' field has been set
         */
        public boolean hasKeywords() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'keywords' field
         */
        public org.openrtb.mobile.User.Builder clearKeywords() {
            keywords = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        public User build() {
            try {
                User record = new User();
                record.uid = fieldSetFlags()[0] ? this.uid : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.yob = fieldSetFlags()[1] ? this.yob : (java.lang.Integer) defaultValue(fields()[1]);
                record.gender = fieldSetFlags()[2] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.zip = fieldSetFlags()[3] ? this.zip : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.country = fieldSetFlags()[4] ? this.country : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.keywords = fieldSetFlags()[5] ? this.keywords : (java.lang.CharSequence) defaultValue(fields()[5]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
