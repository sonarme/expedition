// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb.mobile;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Bid implements Externalizable, Message<Bid> {

    public static Schema<Bid> getSchema() {
        return SCHEMA;
    }

    public static Bid getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Bid DEFAULT_INSTANCE = new Bid();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String impid;
    String price;
    String adid;
    String nurl;
    String adm;
    String adomain;
    String iurl;
    String cid;
    String crid;
    List<String> attr;

    public Bid() {

    }

    public Bid(
            String impid,
            String price
    ) {
        this.impid = impid;
        this.price = price;
    }

    // getters and setters

    // impid

    public String getImpid() {
        return impid;
    }

    public void setImpid(String impid) {
        this.impid = impid;
    }

    // price

    public String getPrice() {
        return price;
    }

    public void setPrice(String price) {
        this.price = price;
    }

    // adid

    public String getAdid() {
        return adid;
    }

    public void setAdid(String adid) {
        this.adid = adid;
    }

    // nurl

    public String getNurl() {
        return nurl;
    }

    public void setNurl(String nurl) {
        this.nurl = nurl;
    }

    // adm

    public String getAdm() {
        return adm;
    }

    public void setAdm(String adm) {
        this.adm = adm;
    }

    // adomain

    public String getAdomain() {
        return adomain;
    }

    public void setAdomain(String adomain) {
        this.adomain = adomain;
    }

    // iurl

    public String getIurl() {
        return iurl;
    }

    public void setIurl(String iurl) {
        this.iurl = iurl;
    }

    // cid

    public String getCid() {
        return cid;
    }

    public void setCid(String cid) {
        this.cid = cid;
    }

    // crid

    public String getCrid() {
        return crid;
    }

    public void setCrid(String crid) {
        this.crid = crid;
    }

    // attr

    public List<String> getAttrList() {
        return attr;
    }

    public void setAttrList(List<String> attr) {
        this.attr = attr;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Bid> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Bid> SCHEMA = new Schema<Bid>() {
        // schema methods

        public Bid newMessage() {
            return new Bid();
        }

        public Class<Bid> typeClass() {
            return Bid.class;
        }

        public String messageName() {
            return Bid.class.getSimpleName();
        }

        public String messageFullName() {
            return Bid.class.getName();
        }

        public boolean isInitialized(Bid message) {
            return
                    message.impid != null
                            && message.price != null;
        }

        public void mergeFrom(Input input, Bid message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.impid = input.readString();
                        break;
                    case 2:
                        message.price = input.readString();
                        break;
                    case 3:
                        message.adid = input.readString();
                        break;
                    case 4:
                        message.nurl = input.readString();
                        break;
                    case 5:
                        message.adm = input.readString();
                        break;
                    case 6:
                        message.adomain = input.readString();
                        break;
                    case 7:
                        message.iurl = input.readString();
                        break;
                    case 8:
                        message.cid = input.readString();
                        break;
                    case 9:
                        message.crid = input.readString();
                        break;
                    case 10:
                        if (message.attr == null)
                            message.attr = new ArrayList<String>();
                        message.attr.add(input.readString());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Bid message) throws IOException {
            if (message.impid == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.impid, false);

            if (message.price == null)
                throw new UninitializedMessageException(message);
            output.writeString(2, message.price, false);

            if (message.adid != null)
                output.writeString(3, message.adid, false);

            if (message.nurl != null)
                output.writeString(4, message.nurl, false);

            if (message.adm != null)
                output.writeString(5, message.adm, false);

            if (message.adomain != null)
                output.writeString(6, message.adomain, false);

            if (message.iurl != null)
                output.writeString(7, message.iurl, false);

            if (message.cid != null)
                output.writeString(8, message.cid, false);

            if (message.crid != null)
                output.writeString(9, message.crid, false);

            if (message.attr != null) {
                for (String attr : message.attr) {
                    if (attr != null)
                        output.writeString(10, attr, true);
                }
            }
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "impid";
                case 2:
                    return "price";
                case 3:
                    return "adid";
                case 4:
                    return "nurl";
                case 5:
                    return "adm";
                case 6:
                    return "adomain";
                case 7:
                    return "iurl";
                case 8:
                    return "cid";
                case 9:
                    return "crid";
                case 10:
                    return "attr";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("impid", 1);
            fieldMap.put("price", 2);
            fieldMap.put("adid", 3);
            fieldMap.put("nurl", 4);
            fieldMap.put("adm", 5);
            fieldMap.put("adomain", 6);
            fieldMap.put("iurl", 7);
            fieldMap.put("cid", 8);
            fieldMap.put("crid", 9);
            fieldMap.put("attr", 10);
        }
    };

}
