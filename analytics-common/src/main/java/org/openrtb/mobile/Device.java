/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.openrtb.mobile;

@SuppressWarnings("all")
/** Device Object used in Bid Request from OpenRTB Mobile 1.0 Spec */
@org.apache.avro.specific.AvroGenerated
public class Device extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Device\",\"namespace\":\"org.openrtb.mobile\",\"doc\":\"Device Object used in Bid Request from OpenRTB Mobile 1.0 Spec\",\"fields\":[{\"name\":\"did\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"SHA1 hashed device ID; IMEI when available, else MEID or ESN.\"},{\"name\":\"dpid\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"SHA1 hashed platform-specific ID (e.g., Android ID or UDID for iOS).\"},{\"name\":\"ip\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"IP address closest to device (typically a carrier IP).\"},{\"name\":\"country\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Country derived from the IP address using ISO-3166-1 Alpha-3.\"},{\"name\":\"carrier\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Carrier or ISP derived from the IP address.\"},{\"name\":\"ua\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Device user agent string.\"},{\"name\":\"make\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Device make (e.g., 'Apple').\"},{\"name\":\"model\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Device model (e.g., 'iPhone').\"},{\"name\":\"os\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Device operating system (e.g., 'iOS').\"},{\"name\":\"osv\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Device operating system version (e.g., '3.1.2').\"},{\"name\":\"js\",\"type\":[\"int\",\"null\"],\"required\":\"false\",\"comment\":\"'1' if the device supports JavaScript; else '0'.\"},{\"name\":\"loc\",\"type\":[\"string\",\"null\"],\"required\":\"false\",\"comment\":\"Lat/Long as '-999.99,-999.99' (i.e., south and west are negative).\"}]}");
    @Deprecated
    public java.lang.CharSequence did;
    @Deprecated
    public java.lang.CharSequence dpid;
    @Deprecated
    public java.lang.CharSequence ip;
    @Deprecated
    public java.lang.CharSequence country;
    @Deprecated
    public java.lang.CharSequence carrier;
    @Deprecated
    public java.lang.CharSequence ua;
    @Deprecated
    public java.lang.CharSequence make;
    @Deprecated
    public java.lang.CharSequence model;
    @Deprecated
    public java.lang.CharSequence os;
    @Deprecated
    public java.lang.CharSequence osv;
    @Deprecated
    public java.lang.Integer js;
    @Deprecated
    public java.lang.CharSequence loc;

    /**
     * Default constructor.
     */
    public Device() {
    }

    /**
     * All-args constructor.
     */
    public Device(java.lang.CharSequence did, java.lang.CharSequence dpid, java.lang.CharSequence ip, java.lang.CharSequence country, java.lang.CharSequence carrier, java.lang.CharSequence ua, java.lang.CharSequence make, java.lang.CharSequence model, java.lang.CharSequence os, java.lang.CharSequence osv, java.lang.Integer js, java.lang.CharSequence loc) {
        this.did = did;
        this.dpid = dpid;
        this.ip = ip;
        this.country = country;
        this.carrier = carrier;
        this.ua = ua;
        this.make = make;
        this.model = model;
        this.os = os;
        this.osv = osv;
        this.js = js;
        this.loc = loc;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return did;
            case 1:
                return dpid;
            case 2:
                return ip;
            case 3:
                return country;
            case 4:
                return carrier;
            case 5:
                return ua;
            case 6:
                return make;
            case 7:
                return model;
            case 8:
                return os;
            case 9:
                return osv;
            case 10:
                return js;
            case 11:
                return loc;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                did = (java.lang.CharSequence) value$;
                break;
            case 1:
                dpid = (java.lang.CharSequence) value$;
                break;
            case 2:
                ip = (java.lang.CharSequence) value$;
                break;
            case 3:
                country = (java.lang.CharSequence) value$;
                break;
            case 4:
                carrier = (java.lang.CharSequence) value$;
                break;
            case 5:
                ua = (java.lang.CharSequence) value$;
                break;
            case 6:
                make = (java.lang.CharSequence) value$;
                break;
            case 7:
                model = (java.lang.CharSequence) value$;
                break;
            case 8:
                os = (java.lang.CharSequence) value$;
                break;
            case 9:
                osv = (java.lang.CharSequence) value$;
                break;
            case 10:
                js = (java.lang.Integer) value$;
                break;
            case 11:
                loc = (java.lang.CharSequence) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'did' field.
     */
    public java.lang.CharSequence getDid() {
        return did;
    }

    /**
     * Sets the value of the 'did' field.
     *
     * @param value the value to set.
     */
    public void setDid(java.lang.CharSequence value) {
        this.did = value;
    }

    /**
     * Gets the value of the 'dpid' field.
     */
    public java.lang.CharSequence getDpid() {
        return dpid;
    }

    /**
     * Sets the value of the 'dpid' field.
     *
     * @param value the value to set.
     */
    public void setDpid(java.lang.CharSequence value) {
        this.dpid = value;
    }

    /**
     * Gets the value of the 'ip' field.
     */
    public java.lang.CharSequence getIp() {
        return ip;
    }

    /**
     * Sets the value of the 'ip' field.
     *
     * @param value the value to set.
     */
    public void setIp(java.lang.CharSequence value) {
        this.ip = value;
    }

    /**
     * Gets the value of the 'country' field.
     */
    public java.lang.CharSequence getCountry() {
        return country;
    }

    /**
     * Sets the value of the 'country' field.
     *
     * @param value the value to set.
     */
    public void setCountry(java.lang.CharSequence value) {
        this.country = value;
    }

    /**
     * Gets the value of the 'carrier' field.
     */
    public java.lang.CharSequence getCarrier() {
        return carrier;
    }

    /**
     * Sets the value of the 'carrier' field.
     *
     * @param value the value to set.
     */
    public void setCarrier(java.lang.CharSequence value) {
        this.carrier = value;
    }

    /**
     * Gets the value of the 'ua' field.
     */
    public java.lang.CharSequence getUa() {
        return ua;
    }

    /**
     * Sets the value of the 'ua' field.
     *
     * @param value the value to set.
     */
    public void setUa(java.lang.CharSequence value) {
        this.ua = value;
    }

    /**
     * Gets the value of the 'make' field.
     */
    public java.lang.CharSequence getMake() {
        return make;
    }

    /**
     * Sets the value of the 'make' field.
     *
     * @param value the value to set.
     */
    public void setMake(java.lang.CharSequence value) {
        this.make = value;
    }

    /**
     * Gets the value of the 'model' field.
     */
    public java.lang.CharSequence getModel() {
        return model;
    }

    /**
     * Sets the value of the 'model' field.
     *
     * @param value the value to set.
     */
    public void setModel(java.lang.CharSequence value) {
        this.model = value;
    }

    /**
     * Gets the value of the 'os' field.
     */
    public java.lang.CharSequence getOs() {
        return os;
    }

    /**
     * Sets the value of the 'os' field.
     *
     * @param value the value to set.
     */
    public void setOs(java.lang.CharSequence value) {
        this.os = value;
    }

    /**
     * Gets the value of the 'osv' field.
     */
    public java.lang.CharSequence getOsv() {
        return osv;
    }

    /**
     * Sets the value of the 'osv' field.
     *
     * @param value the value to set.
     */
    public void setOsv(java.lang.CharSequence value) {
        this.osv = value;
    }

    /**
     * Gets the value of the 'js' field.
     */
    public java.lang.Integer getJs() {
        return js;
    }

    /**
     * Sets the value of the 'js' field.
     *
     * @param value the value to set.
     */
    public void setJs(java.lang.Integer value) {
        this.js = value;
    }

    /**
     * Gets the value of the 'loc' field.
     */
    public java.lang.CharSequence getLoc() {
        return loc;
    }

    /**
     * Sets the value of the 'loc' field.
     *
     * @param value the value to set.
     */
    public void setLoc(java.lang.CharSequence value) {
        this.loc = value;
    }

    /**
     * Creates a new Device RecordBuilder
     */
    public static org.openrtb.mobile.Device.Builder newBuilder() {
        return new org.openrtb.mobile.Device.Builder();
    }

    /**
     * Creates a new Device RecordBuilder by copying an existing Builder
     */
    public static org.openrtb.mobile.Device.Builder newBuilder(org.openrtb.mobile.Device.Builder other) {
        return new org.openrtb.mobile.Device.Builder(other);
    }

    /**
     * Creates a new Device RecordBuilder by copying an existing Device instance
     */
    public static org.openrtb.mobile.Device.Builder newBuilder(org.openrtb.mobile.Device other) {
        return new org.openrtb.mobile.Device.Builder(other);
    }

    /**
     * RecordBuilder for Device instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Device>
            implements org.apache.avro.data.RecordBuilder<Device> {

        private java.lang.CharSequence did;
        private java.lang.CharSequence dpid;
        private java.lang.CharSequence ip;
        private java.lang.CharSequence country;
        private java.lang.CharSequence carrier;
        private java.lang.CharSequence ua;
        private java.lang.CharSequence make;
        private java.lang.CharSequence model;
        private java.lang.CharSequence os;
        private java.lang.CharSequence osv;
        private java.lang.Integer js;
        private java.lang.CharSequence loc;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(org.openrtb.mobile.Device.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder
         */
        private Builder(org.openrtb.mobile.Device.Builder other) {
            super(other);
        }

        /**
         * Creates a Builder by copying an existing Device instance
         */
        private Builder(org.openrtb.mobile.Device other) {
            super(org.openrtb.mobile.Device.SCHEMA$);
            if (isValidValue(fields()[0], other.did)) {
                this.did = data().deepCopy(fields()[0].schema(), other.did);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.dpid)) {
                this.dpid = data().deepCopy(fields()[1].schema(), other.dpid);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.ip)) {
                this.ip = data().deepCopy(fields()[2].schema(), other.ip);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.country)) {
                this.country = data().deepCopy(fields()[3].schema(), other.country);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.carrier)) {
                this.carrier = data().deepCopy(fields()[4].schema(), other.carrier);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.ua)) {
                this.ua = data().deepCopy(fields()[5].schema(), other.ua);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.make)) {
                this.make = data().deepCopy(fields()[6].schema(), other.make);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.model)) {
                this.model = data().deepCopy(fields()[7].schema(), other.model);
                fieldSetFlags()[7] = true;
            }
            if (isValidValue(fields()[8], other.os)) {
                this.os = data().deepCopy(fields()[8].schema(), other.os);
                fieldSetFlags()[8] = true;
            }
            if (isValidValue(fields()[9], other.osv)) {
                this.osv = data().deepCopy(fields()[9].schema(), other.osv);
                fieldSetFlags()[9] = true;
            }
            if (isValidValue(fields()[10], other.js)) {
                this.js = data().deepCopy(fields()[10].schema(), other.js);
                fieldSetFlags()[10] = true;
            }
            if (isValidValue(fields()[11], other.loc)) {
                this.loc = data().deepCopy(fields()[11].schema(), other.loc);
                fieldSetFlags()[11] = true;
            }
        }

        /**
         * Gets the value of the 'did' field
         */
        public java.lang.CharSequence getDid() {
            return did;
        }

        /**
         * Sets the value of the 'did' field
         */
        public org.openrtb.mobile.Device.Builder setDid(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.did = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'did' field has been set
         */
        public boolean hasDid() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'did' field
         */
        public org.openrtb.mobile.Device.Builder clearDid() {
            did = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'dpid' field
         */
        public java.lang.CharSequence getDpid() {
            return dpid;
        }

        /**
         * Sets the value of the 'dpid' field
         */
        public org.openrtb.mobile.Device.Builder setDpid(java.lang.CharSequence value) {
            validate(fields()[1], value);
            this.dpid = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'dpid' field has been set
         */
        public boolean hasDpid() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'dpid' field
         */
        public org.openrtb.mobile.Device.Builder clearDpid() {
            dpid = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'ip' field
         */
        public java.lang.CharSequence getIp() {
            return ip;
        }

        /**
         * Sets the value of the 'ip' field
         */
        public org.openrtb.mobile.Device.Builder setIp(java.lang.CharSequence value) {
            validate(fields()[2], value);
            this.ip = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'ip' field has been set
         */
        public boolean hasIp() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'ip' field
         */
        public org.openrtb.mobile.Device.Builder clearIp() {
            ip = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'country' field
         */
        public java.lang.CharSequence getCountry() {
            return country;
        }

        /**
         * Sets the value of the 'country' field
         */
        public org.openrtb.mobile.Device.Builder setCountry(java.lang.CharSequence value) {
            validate(fields()[3], value);
            this.country = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'country' field has been set
         */
        public boolean hasCountry() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'country' field
         */
        public org.openrtb.mobile.Device.Builder clearCountry() {
            country = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'carrier' field
         */
        public java.lang.CharSequence getCarrier() {
            return carrier;
        }

        /**
         * Sets the value of the 'carrier' field
         */
        public org.openrtb.mobile.Device.Builder setCarrier(java.lang.CharSequence value) {
            validate(fields()[4], value);
            this.carrier = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'carrier' field has been set
         */
        public boolean hasCarrier() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'carrier' field
         */
        public org.openrtb.mobile.Device.Builder clearCarrier() {
            carrier = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'ua' field
         */
        public java.lang.CharSequence getUa() {
            return ua;
        }

        /**
         * Sets the value of the 'ua' field
         */
        public org.openrtb.mobile.Device.Builder setUa(java.lang.CharSequence value) {
            validate(fields()[5], value);
            this.ua = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'ua' field has been set
         */
        public boolean hasUa() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'ua' field
         */
        public org.openrtb.mobile.Device.Builder clearUa() {
            ua = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'make' field
         */
        public java.lang.CharSequence getMake() {
            return make;
        }

        /**
         * Sets the value of the 'make' field
         */
        public org.openrtb.mobile.Device.Builder setMake(java.lang.CharSequence value) {
            validate(fields()[6], value);
            this.make = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'make' field has been set
         */
        public boolean hasMake() {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'make' field
         */
        public org.openrtb.mobile.Device.Builder clearMake() {
            make = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'model' field
         */
        public java.lang.CharSequence getModel() {
            return model;
        }

        /**
         * Sets the value of the 'model' field
         */
        public org.openrtb.mobile.Device.Builder setModel(java.lang.CharSequence value) {
            validate(fields()[7], value);
            this.model = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'model' field has been set
         */
        public boolean hasModel() {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'model' field
         */
        public org.openrtb.mobile.Device.Builder clearModel() {
            model = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        /**
         * Gets the value of the 'os' field
         */
        public java.lang.CharSequence getOs() {
            return os;
        }

        /**
         * Sets the value of the 'os' field
         */
        public org.openrtb.mobile.Device.Builder setOs(java.lang.CharSequence value) {
            validate(fields()[8], value);
            this.os = value;
            fieldSetFlags()[8] = true;
            return this;
        }

        /**
         * Checks whether the 'os' field has been set
         */
        public boolean hasOs() {
            return fieldSetFlags()[8];
        }

        /**
         * Clears the value of the 'os' field
         */
        public org.openrtb.mobile.Device.Builder clearOs() {
            os = null;
            fieldSetFlags()[8] = false;
            return this;
        }

        /**
         * Gets the value of the 'osv' field
         */
        public java.lang.CharSequence getOsv() {
            return osv;
        }

        /**
         * Sets the value of the 'osv' field
         */
        public org.openrtb.mobile.Device.Builder setOsv(java.lang.CharSequence value) {
            validate(fields()[9], value);
            this.osv = value;
            fieldSetFlags()[9] = true;
            return this;
        }

        /**
         * Checks whether the 'osv' field has been set
         */
        public boolean hasOsv() {
            return fieldSetFlags()[9];
        }

        /**
         * Clears the value of the 'osv' field
         */
        public org.openrtb.mobile.Device.Builder clearOsv() {
            osv = null;
            fieldSetFlags()[9] = false;
            return this;
        }

        /**
         * Gets the value of the 'js' field
         */
        public java.lang.Integer getJs() {
            return js;
        }

        /**
         * Sets the value of the 'js' field
         */
        public org.openrtb.mobile.Device.Builder setJs(java.lang.Integer value) {
            validate(fields()[10], value);
            this.js = value;
            fieldSetFlags()[10] = true;
            return this;
        }

        /**
         * Checks whether the 'js' field has been set
         */
        public boolean hasJs() {
            return fieldSetFlags()[10];
        }

        /**
         * Clears the value of the 'js' field
         */
        public org.openrtb.mobile.Device.Builder clearJs() {
            js = null;
            fieldSetFlags()[10] = false;
            return this;
        }

        /**
         * Gets the value of the 'loc' field
         */
        public java.lang.CharSequence getLoc() {
            return loc;
        }

        /**
         * Sets the value of the 'loc' field
         */
        public org.openrtb.mobile.Device.Builder setLoc(java.lang.CharSequence value) {
            validate(fields()[11], value);
            this.loc = value;
            fieldSetFlags()[11] = true;
            return this;
        }

        /**
         * Checks whether the 'loc' field has been set
         */
        public boolean hasLoc() {
            return fieldSetFlags()[11];
        }

        /**
         * Clears the value of the 'loc' field
         */
        public org.openrtb.mobile.Device.Builder clearLoc() {
            loc = null;
            fieldSetFlags()[11] = false;
            return this;
        }

        @Override
        public Device build() {
            try {
                Device record = new Device();
                record.did = fieldSetFlags()[0] ? this.did : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.dpid = fieldSetFlags()[1] ? this.dpid : (java.lang.CharSequence) defaultValue(fields()[1]);
                record.ip = fieldSetFlags()[2] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[2]);
                record.country = fieldSetFlags()[3] ? this.country : (java.lang.CharSequence) defaultValue(fields()[3]);
                record.carrier = fieldSetFlags()[4] ? this.carrier : (java.lang.CharSequence) defaultValue(fields()[4]);
                record.ua = fieldSetFlags()[5] ? this.ua : (java.lang.CharSequence) defaultValue(fields()[5]);
                record.make = fieldSetFlags()[6] ? this.make : (java.lang.CharSequence) defaultValue(fields()[6]);
                record.model = fieldSetFlags()[7] ? this.model : (java.lang.CharSequence) defaultValue(fields()[7]);
                record.os = fieldSetFlags()[8] ? this.os : (java.lang.CharSequence) defaultValue(fields()[8]);
                record.osv = fieldSetFlags()[9] ? this.osv : (java.lang.CharSequence) defaultValue(fields()[9]);
                record.js = fieldSetFlags()[10] ? this.js : (java.lang.Integer) defaultValue(fields()[10]);
                record.loc = fieldSetFlags()[11] ? this.loc : (java.lang.CharSequence) defaultValue(fields()[11]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
