// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb.mobile;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Device implements Externalizable, Message<Device> {

    public static Schema<Device> getSchema() {
        return SCHEMA;
    }

    public static Device getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Device DEFAULT_INSTANCE = new Device();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String did;
    String dpid;
    String ip;
    String country;
    String carrier;
    String ua;
    String make;
    String model;
    String os;
    String osv;
    Integer js;
    String loc;

    public Device() {

    }

    // getters and setters

    // did

    public String getDid() {
        return did;
    }

    public void setDid(String did) {
        this.did = did;
    }

    // dpid

    public String getDpid() {
        return dpid;
    }

    public void setDpid(String dpid) {
        this.dpid = dpid;
    }

    // ip

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    // country

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    // carrier

    public String getCarrier() {
        return carrier;
    }

    public void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    // ua

    public String getUa() {
        return ua;
    }

    public void setUa(String ua) {
        this.ua = ua;
    }

    // make

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        this.make = make;
    }

    // model

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    // os

    public String getOs() {
        return os;
    }

    public void setOs(String os) {
        this.os = os;
    }

    // osv

    public String getOsv() {
        return osv;
    }

    public void setOsv(String osv) {
        this.osv = osv;
    }

    // js

    public Integer getJs() {
        return js;
    }

    public void setJs(Integer js) {
        this.js = js;
    }

    // loc

    public String getLoc() {
        return loc;
    }

    public void setLoc(String loc) {
        this.loc = loc;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Device> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Device> SCHEMA = new Schema<Device>() {
        // schema methods

        public Device newMessage() {
            return new Device();
        }

        public Class<Device> typeClass() {
            return Device.class;
        }

        public String messageName() {
            return Device.class.getSimpleName();
        }

        public String messageFullName() {
            return Device.class.getName();
        }

        public boolean isInitialized(Device message) {
            return true;
        }

        public void mergeFrom(Input input, Device message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.did = input.readString();
                        break;
                    case 2:
                        message.dpid = input.readString();
                        break;
                    case 3:
                        message.ip = input.readString();
                        break;
                    case 4:
                        message.country = input.readString();
                        break;
                    case 5:
                        message.carrier = input.readString();
                        break;
                    case 6:
                        message.ua = input.readString();
                        break;
                    case 7:
                        message.make = input.readString();
                        break;
                    case 8:
                        message.model = input.readString();
                        break;
                    case 9:
                        message.os = input.readString();
                        break;
                    case 10:
                        message.osv = input.readString();
                        break;
                    case 11:
                        message.js = input.readInt32();
                        break;
                    case 12:
                        message.loc = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Device message) throws IOException {
            if (message.did != null)
                output.writeString(1, message.did, false);

            if (message.dpid != null)
                output.writeString(2, message.dpid, false);

            if (message.ip != null)
                output.writeString(3, message.ip, false);

            if (message.country != null)
                output.writeString(4, message.country, false);

            if (message.carrier != null)
                output.writeString(5, message.carrier, false);

            if (message.ua != null)
                output.writeString(6, message.ua, false);

            if (message.make != null)
                output.writeString(7, message.make, false);

            if (message.model != null)
                output.writeString(8, message.model, false);

            if (message.os != null)
                output.writeString(9, message.os, false);

            if (message.osv != null)
                output.writeString(10, message.osv, false);

            if (message.js != null)
                output.writeInt32(11, message.js, false);

            if (message.loc != null)
                output.writeString(12, message.loc, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "did";
                case 2:
                    return "dpid";
                case 3:
                    return "ip";
                case 4:
                    return "country";
                case 5:
                    return "carrier";
                case 6:
                    return "ua";
                case 7:
                    return "make";
                case 8:
                    return "model";
                case 9:
                    return "os";
                case 10:
                    return "osv";
                case 11:
                    return "js";
                case 12:
                    return "loc";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("did", 1);
            fieldMap.put("dpid", 2);
            fieldMap.put("ip", 3);
            fieldMap.put("country", 4);
            fieldMap.put("carrier", 5);
            fieldMap.put("ua", 6);
            fieldMap.put("make", 7);
            fieldMap.put("model", 8);
            fieldMap.put("os", 9);
            fieldMap.put("osv", 10);
            fieldMap.put("js", 11);
            fieldMap.put("loc", 12);
        }
    };

}
