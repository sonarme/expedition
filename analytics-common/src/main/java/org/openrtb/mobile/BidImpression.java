// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb.mobile;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class BidImpression implements Externalizable, Message<BidImpression> {

    public static Schema<BidImpression> getSchema() {
        return SCHEMA;
    }

    public static BidImpression getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final BidImpression DEFAULT_INSTANCE = new BidImpression();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String impid;
    List<String> wseat;
    Integer h;
    Integer w;
    Integer pos;
    Integer instl;
    List<String> btype;
    List<String> battr;

    public BidImpression() {

    }

    public BidImpression(
            String impid
    ) {
        this.impid = impid;
    }

    // getters and setters

    // impid

    public String getImpid() {
        return impid;
    }

    public void setImpid(String impid) {
        this.impid = impid;
    }

    // wseat

    public List<String> getWseatList() {
        return wseat;
    }

    public void setWseatList(List<String> wseat) {
        this.wseat = wseat;
    }

    // h

    public Integer getH() {
        return h;
    }

    public void setH(Integer h) {
        this.h = h;
    }

    // w

    public Integer getW() {
        return w;
    }

    public void setW(Integer w) {
        this.w = w;
    }

    // pos

    public Integer getPos() {
        return pos;
    }

    public void setPos(Integer pos) {
        this.pos = pos;
    }

    // instl

    public Integer getInstl() {
        return instl;
    }

    public void setInstl(Integer instl) {
        this.instl = instl;
    }

    // btype

    public List<String> getBtypeList() {
        return btype;
    }

    public void setBtypeList(List<String> btype) {
        this.btype = btype;
    }

    // battr

    public List<String> getBattrList() {
        return battr;
    }

    public void setBattrList(List<String> battr) {
        this.battr = battr;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<BidImpression> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<BidImpression> SCHEMA = new Schema<BidImpression>() {
        // schema methods

        public BidImpression newMessage() {
            return new BidImpression();
        }

        public Class<BidImpression> typeClass() {
            return BidImpression.class;
        }

        public String messageName() {
            return BidImpression.class.getSimpleName();
        }

        public String messageFullName() {
            return BidImpression.class.getName();
        }

        public boolean isInitialized(BidImpression message) {
            return
                    message.impid != null;
        }

        public void mergeFrom(Input input, BidImpression message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.impid = input.readString();
                        break;
                    case 2:
                        if (message.wseat == null)
                            message.wseat = new ArrayList<String>();
                        message.wseat.add(input.readString());
                        break;
                    case 3:
                        message.h = input.readInt32();
                        break;
                    case 4:
                        message.w = input.readInt32();
                        break;
                    case 5:
                        message.pos = input.readInt32();
                        break;
                    case 6:
                        message.instl = input.readInt32();
                        break;
                    case 7:
                        if (message.btype == null)
                            message.btype = new ArrayList<String>();
                        message.btype.add(input.readString());
                        break;
                    case 8:
                        if (message.battr == null)
                            message.battr = new ArrayList<String>();
                        message.battr.add(input.readString());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, BidImpression message) throws IOException {
            if (message.impid == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.impid, false);

            if (message.wseat != null) {
                for (String wseat : message.wseat) {
                    if (wseat != null)
                        output.writeString(2, wseat, true);
                }
            }

            if (message.h != null)
                output.writeInt32(3, message.h, false);

            if (message.w != null)
                output.writeInt32(4, message.w, false);

            if (message.pos != null)
                output.writeInt32(5, message.pos, false);

            if (message.instl != null)
                output.writeInt32(6, message.instl, false);

            if (message.btype != null) {
                for (String btype : message.btype) {
                    if (btype != null)
                        output.writeString(7, btype, true);
                }
            }

            if (message.battr != null) {
                for (String battr : message.battr) {
                    if (battr != null)
                        output.writeString(8, battr, true);
                }
            }
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "impid";
                case 2:
                    return "wseat";
                case 3:
                    return "h";
                case 4:
                    return "w";
                case 5:
                    return "pos";
                case 6:
                    return "instl";
                case 7:
                    return "btype";
                case 8:
                    return "battr";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("impid", 1);
            fieldMap.put("wseat", 2);
            fieldMap.put("h", 3);
            fieldMap.put("w", 4);
            fieldMap.put("pos", 5);
            fieldMap.put("instl", 6);
            fieldMap.put("btype", 7);
            fieldMap.put("battr", 8);
        }
    };

}
