/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.openrtb.mobile;

@SuppressWarnings("all")
/** Bid Impression Object used in Bid Request from OpenRTB Mobile 1.0 Spec */
@org.apache.avro.specific.AvroGenerated
public class BidImpression extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BidImpression\",\"namespace\":\"org.openrtb.mobile\",\"doc\":\"Bid Impression Object used in Bid Request from OpenRTB Mobile 1.0 Spec\",\"fields\":[{\"name\":\"impid\",\"type\":\"string\",\"required\":\"true\",\"comment\":\"Unique ID of the impression.\"},{\"name\":\"wseat\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"],\"required\":\"false\",\"comment\":\"Array of allowed bidder seats; default is unrestricted.\"},{\"name\":\"h\",\"type\":[\"int\",\"null\"],\"required\":\"false\",\"comment\":\"Height in pixels.\"},{\"name\":\"w\",\"type\":[\"int\",\"null\"],\"required\":\"false\",\"comment\":\"Width in pixels.\"},{\"name\":\"pos\",\"type\":[\"int\",\"null\"],\"required\":\"false\",\"comment\":\"Position of the impression on the page (see Section 3.4).\"},{\"name\":\"instl\",\"type\":[\"int\",\"null\"],\"required\":\"false\",\"comment\":\"1 if the ad is interstitial or full screen; else '0' (i.e., no).\"},{\"name\":\"btype\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"],\"required\":\"false\",\"comment\":\"Array of blocked ad types (see Section 3.2).\"},{\"name\":\"battr\",\"type\":[{\"type\":\"array\",\"items\":\"string\"},\"null\"],\"required\":\"false\",\"comment\":\"Array of blocked creative attributes (see Section 3.3).\"}]}");
    @Deprecated
    public java.lang.CharSequence impid;
    @Deprecated
    public java.util.List<java.lang.CharSequence> wseat;
    @Deprecated
    public java.lang.Integer h;
    @Deprecated
    public java.lang.Integer w;
    @Deprecated
    public java.lang.Integer pos;
    @Deprecated
    public java.lang.Integer instl;
    @Deprecated
    public java.util.List<java.lang.CharSequence> btype;
    @Deprecated
    public java.util.List<java.lang.CharSequence> battr;

    /**
     * Default constructor.
     */
    public BidImpression() {
    }

    /**
     * All-args constructor.
     */
    public BidImpression(java.lang.CharSequence impid, java.util.List<java.lang.CharSequence> wseat, java.lang.Integer h, java.lang.Integer w, java.lang.Integer pos, java.lang.Integer instl, java.util.List<java.lang.CharSequence> btype, java.util.List<java.lang.CharSequence> battr) {
        this.impid = impid;
        this.wseat = wseat;
        this.h = h;
        this.w = w;
        this.pos = pos;
        this.instl = instl;
        this.btype = btype;
        this.battr = battr;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return impid;
            case 1:
                return wseat;
            case 2:
                return h;
            case 3:
                return w;
            case 4:
                return pos;
            case 5:
                return instl;
            case 6:
                return btype;
            case 7:
                return battr;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                impid = (java.lang.CharSequence) value$;
                break;
            case 1:
                wseat = (java.util.List<java.lang.CharSequence>) value$;
                break;
            case 2:
                h = (java.lang.Integer) value$;
                break;
            case 3:
                w = (java.lang.Integer) value$;
                break;
            case 4:
                pos = (java.lang.Integer) value$;
                break;
            case 5:
                instl = (java.lang.Integer) value$;
                break;
            case 6:
                btype = (java.util.List<java.lang.CharSequence>) value$;
                break;
            case 7:
                battr = (java.util.List<java.lang.CharSequence>) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'impid' field.
     */
    public java.lang.CharSequence getImpid() {
        return impid;
    }

    /**
     * Sets the value of the 'impid' field.
     *
     * @param value the value to set.
     */
    public void setImpid(java.lang.CharSequence value) {
        this.impid = value;
    }

    /**
     * Gets the value of the 'wseat' field.
     */
    public java.util.List<java.lang.CharSequence> getWseat() {
        return wseat;
    }

    /**
     * Sets the value of the 'wseat' field.
     *
     * @param value the value to set.
     */
    public void setWseat(java.util.List<java.lang.CharSequence> value) {
        this.wseat = value;
    }

    /**
     * Gets the value of the 'h' field.
     */
    public java.lang.Integer getH() {
        return h;
    }

    /**
     * Sets the value of the 'h' field.
     *
     * @param value the value to set.
     */
    public void setH(java.lang.Integer value) {
        this.h = value;
    }

    /**
     * Gets the value of the 'w' field.
     */
    public java.lang.Integer getW() {
        return w;
    }

    /**
     * Sets the value of the 'w' field.
     *
     * @param value the value to set.
     */
    public void setW(java.lang.Integer value) {
        this.w = value;
    }

    /**
     * Gets the value of the 'pos' field.
     */
    public java.lang.Integer getPos() {
        return pos;
    }

    /**
     * Sets the value of the 'pos' field.
     *
     * @param value the value to set.
     */
    public void setPos(java.lang.Integer value) {
        this.pos = value;
    }

    /**
     * Gets the value of the 'instl' field.
     */
    public java.lang.Integer getInstl() {
        return instl;
    }

    /**
     * Sets the value of the 'instl' field.
     *
     * @param value the value to set.
     */
    public void setInstl(java.lang.Integer value) {
        this.instl = value;
    }

    /**
     * Gets the value of the 'btype' field.
     */
    public java.util.List<java.lang.CharSequence> getBtype() {
        return btype;
    }

    /**
     * Sets the value of the 'btype' field.
     *
     * @param value the value to set.
     */
    public void setBtype(java.util.List<java.lang.CharSequence> value) {
        this.btype = value;
    }

    /**
     * Gets the value of the 'battr' field.
     */
    public java.util.List<java.lang.CharSequence> getBattr() {
        return battr;
    }

    /**
     * Sets the value of the 'battr' field.
     *
     * @param value the value to set.
     */
    public void setBattr(java.util.List<java.lang.CharSequence> value) {
        this.battr = value;
    }

    /**
     * Creates a new BidImpression RecordBuilder
     */
    public static org.openrtb.mobile.BidImpression.Builder newBuilder() {
        return new org.openrtb.mobile.BidImpression.Builder();
    }

    /**
     * Creates a new BidImpression RecordBuilder by copying an existing Builder
     */
    public static org.openrtb.mobile.BidImpression.Builder newBuilder(org.openrtb.mobile.BidImpression.Builder other) {
        return new org.openrtb.mobile.BidImpression.Builder(other);
    }

    /**
     * Creates a new BidImpression RecordBuilder by copying an existing BidImpression instance
     */
    public static org.openrtb.mobile.BidImpression.Builder newBuilder(org.openrtb.mobile.BidImpression other) {
        return new org.openrtb.mobile.BidImpression.Builder(other);
    }

    /**
     * RecordBuilder for BidImpression instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BidImpression>
            implements org.apache.avro.data.RecordBuilder<BidImpression> {

        private java.lang.CharSequence impid;
        private java.util.List<java.lang.CharSequence> wseat;
        private java.lang.Integer h;
        private java.lang.Integer w;
        private java.lang.Integer pos;
        private java.lang.Integer instl;
        private java.util.List<java.lang.CharSequence> btype;
        private java.util.List<java.lang.CharSequence> battr;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(org.openrtb.mobile.BidImpression.SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder
         */
        private Builder(org.openrtb.mobile.BidImpression.Builder other) {
            super(other);
        }

        /**
         * Creates a Builder by copying an existing BidImpression instance
         */
        private Builder(org.openrtb.mobile.BidImpression other) {
            super(org.openrtb.mobile.BidImpression.SCHEMA$);
            if (isValidValue(fields()[0], other.impid)) {
                this.impid = data().deepCopy(fields()[0].schema(), other.impid);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.wseat)) {
                this.wseat = data().deepCopy(fields()[1].schema(), other.wseat);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.h)) {
                this.h = data().deepCopy(fields()[2].schema(), other.h);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.w)) {
                this.w = data().deepCopy(fields()[3].schema(), other.w);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.pos)) {
                this.pos = data().deepCopy(fields()[4].schema(), other.pos);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.instl)) {
                this.instl = data().deepCopy(fields()[5].schema(), other.instl);
                fieldSetFlags()[5] = true;
            }
            if (isValidValue(fields()[6], other.btype)) {
                this.btype = data().deepCopy(fields()[6].schema(), other.btype);
                fieldSetFlags()[6] = true;
            }
            if (isValidValue(fields()[7], other.battr)) {
                this.battr = data().deepCopy(fields()[7].schema(), other.battr);
                fieldSetFlags()[7] = true;
            }
        }

        /**
         * Gets the value of the 'impid' field
         */
        public java.lang.CharSequence getImpid() {
            return impid;
        }

        /**
         * Sets the value of the 'impid' field
         */
        public org.openrtb.mobile.BidImpression.Builder setImpid(java.lang.CharSequence value) {
            validate(fields()[0], value);
            this.impid = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'impid' field has been set
         */
        public boolean hasImpid() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'impid' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearImpid() {
            impid = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Gets the value of the 'wseat' field
         */
        public java.util.List<java.lang.CharSequence> getWseat() {
            return wseat;
        }

        /**
         * Sets the value of the 'wseat' field
         */
        public org.openrtb.mobile.BidImpression.Builder setWseat(java.util.List<java.lang.CharSequence> value) {
            validate(fields()[1], value);
            this.wseat = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'wseat' field has been set
         */
        public boolean hasWseat() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'wseat' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearWseat() {
            wseat = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'h' field
         */
        public java.lang.Integer getH() {
            return h;
        }

        /**
         * Sets the value of the 'h' field
         */
        public org.openrtb.mobile.BidImpression.Builder setH(java.lang.Integer value) {
            validate(fields()[2], value);
            this.h = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'h' field has been set
         */
        public boolean hasH() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'h' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearH() {
            h = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'w' field
         */
        public java.lang.Integer getW() {
            return w;
        }

        /**
         * Sets the value of the 'w' field
         */
        public org.openrtb.mobile.BidImpression.Builder setW(java.lang.Integer value) {
            validate(fields()[3], value);
            this.w = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'w' field has been set
         */
        public boolean hasW() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'w' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearW() {
            w = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /**
         * Gets the value of the 'pos' field
         */
        public java.lang.Integer getPos() {
            return pos;
        }

        /**
         * Sets the value of the 'pos' field
         */
        public org.openrtb.mobile.BidImpression.Builder setPos(java.lang.Integer value) {
            validate(fields()[4], value);
            this.pos = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /**
         * Checks whether the 'pos' field has been set
         */
        public boolean hasPos() {
            return fieldSetFlags()[4];
        }

        /**
         * Clears the value of the 'pos' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearPos() {
            pos = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /**
         * Gets the value of the 'instl' field
         */
        public java.lang.Integer getInstl() {
            return instl;
        }

        /**
         * Sets the value of the 'instl' field
         */
        public org.openrtb.mobile.BidImpression.Builder setInstl(java.lang.Integer value) {
            validate(fields()[5], value);
            this.instl = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /**
         * Checks whether the 'instl' field has been set
         */
        public boolean hasInstl() {
            return fieldSetFlags()[5];
        }

        /**
         * Clears the value of the 'instl' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearInstl() {
            instl = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        /**
         * Gets the value of the 'btype' field
         */
        public java.util.List<java.lang.CharSequence> getBtype() {
            return btype;
        }

        /**
         * Sets the value of the 'btype' field
         */
        public org.openrtb.mobile.BidImpression.Builder setBtype(java.util.List<java.lang.CharSequence> value) {
            validate(fields()[6], value);
            this.btype = value;
            fieldSetFlags()[6] = true;
            return this;
        }

        /**
         * Checks whether the 'btype' field has been set
         */
        public boolean hasBtype() {
            return fieldSetFlags()[6];
        }

        /**
         * Clears the value of the 'btype' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearBtype() {
            btype = null;
            fieldSetFlags()[6] = false;
            return this;
        }

        /**
         * Gets the value of the 'battr' field
         */
        public java.util.List<java.lang.CharSequence> getBattr() {
            return battr;
        }

        /**
         * Sets the value of the 'battr' field
         */
        public org.openrtb.mobile.BidImpression.Builder setBattr(java.util.List<java.lang.CharSequence> value) {
            validate(fields()[7], value);
            this.battr = value;
            fieldSetFlags()[7] = true;
            return this;
        }

        /**
         * Checks whether the 'battr' field has been set
         */
        public boolean hasBattr() {
            return fieldSetFlags()[7];
        }

        /**
         * Clears the value of the 'battr' field
         */
        public org.openrtb.mobile.BidImpression.Builder clearBattr() {
            battr = null;
            fieldSetFlags()[7] = false;
            return this;
        }

        @Override
        public BidImpression build() {
            try {
                BidImpression record = new BidImpression();
                record.impid = fieldSetFlags()[0] ? this.impid : (java.lang.CharSequence) defaultValue(fields()[0]);
                record.wseat = fieldSetFlags()[1] ? this.wseat : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
                record.h = fieldSetFlags()[2] ? this.h : (java.lang.Integer) defaultValue(fields()[2]);
                record.w = fieldSetFlags()[3] ? this.w : (java.lang.Integer) defaultValue(fields()[3]);
                record.pos = fieldSetFlags()[4] ? this.pos : (java.lang.Integer) defaultValue(fields()[4]);
                record.instl = fieldSetFlags()[5] ? this.instl : (java.lang.Integer) defaultValue(fields()[5]);
                record.btype = fieldSetFlags()[6] ? this.btype : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
                record.battr = fieldSetFlags()[7] ? this.battr : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
