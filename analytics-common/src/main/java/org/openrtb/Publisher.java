// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Publisher implements Externalizable, Message<Publisher> {

    public static Schema<Publisher> getSchema() {
        return SCHEMA;
    }

    public static Publisher getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Publisher DEFAULT_INSTANCE = new Publisher();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String id;
    String name;
    List<String> cat;
    String domain;

    public Publisher() {

    }

    // getters and setters

    // id

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    // name

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // cat

    public List<String> getCatList() {
        return cat;
    }

    public void setCatList(List<String> cat) {
        this.cat = cat;
    }

    // domain

    public String getDomain() {
        return domain;
    }

    public void setDomain(String domain) {
        this.domain = domain;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Publisher> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Publisher> SCHEMA = new Schema<Publisher>() {
        // schema methods

        public Publisher newMessage() {
            return new Publisher();
        }

        public Class<Publisher> typeClass() {
            return Publisher.class;
        }

        public String messageName() {
            return Publisher.class.getSimpleName();
        }

        public String messageFullName() {
            return Publisher.class.getName();
        }

        public boolean isInitialized(Publisher message) {
            return true;
        }

        public void mergeFrom(Input input, Publisher message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readString();
                        break;
                    case 2:
                        message.name = input.readString();
                        break;
                    case 3:
                        if (message.cat == null)
                            message.cat = new ArrayList<String>();
                        message.cat.add(input.readString());
                        break;
                    case 4:
                        message.domain = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Publisher message) throws IOException {
            if (message.id != null)
                output.writeString(1, message.id, false);

            if (message.name != null)
                output.writeString(2, message.name, false);

            if (message.cat != null) {
                for (String cat : message.cat) {
                    if (cat != null)
                        output.writeString(3, cat, true);
                }
            }

            if (message.domain != null)
                output.writeString(4, message.domain, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "id";
                case 2:
                    return "name";
                case 3:
                    return "cat";
                case 4:
                    return "domain";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("id", 1);
            fieldMap.put("name", 2);
            fieldMap.put("cat", 3);
            fieldMap.put("domain", 4);
        }
    };

}
