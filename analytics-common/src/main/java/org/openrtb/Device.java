// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Device implements Externalizable, Message<Device> {

    public static Schema<Device> getSchema() {
        return SCHEMA;
    }

    public static Device getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Device DEFAULT_INSTANCE = new Device();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Bool dnt;
    String ua;
    String ip;
    Geo geo;
    String didsha1;
    String didmd5;
    String dpidsha1;
    String dpidmd5;
    String ipv6;
    String carrier;
    String language;
    String make;
    String model;
    String os;
    String osv;
    Bool js;
    ConnectionType connectiontype;
    Integer devicetype;
    String flashver;

    public Device() {

    }

    // getters and setters

    // dnt

    public Bool getDnt() {
        return dnt == null ? Bool.FALSE : dnt;
    }

    public void setDnt(Bool dnt) {
        this.dnt = dnt;
    }

    // ua

    public String getUa() {
        return ua;
    }

    public void setUa(String ua) {
        this.ua = ua;
    }

    // ip

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    // geo

    public Geo getGeo() {
        return geo;
    }

    public void setGeo(Geo geo) {
        this.geo = geo;
    }

    // didsha1

    public String getDidsha1() {
        return didsha1;
    }

    public void setDidsha1(String didsha1) {
        this.didsha1 = didsha1;
    }

    // didmd5

    public String getDidmd5() {
        return didmd5;
    }

    public void setDidmd5(String didmd5) {
        this.didmd5 = didmd5;
    }

    // dpidsha1

    public String getDpidsha1() {
        return dpidsha1;
    }

    public void setDpidsha1(String dpidsha1) {
        this.dpidsha1 = dpidsha1;
    }

    // dpidmd5

    public String getDpidmd5() {
        return dpidmd5;
    }

    public void setDpidmd5(String dpidmd5) {
        this.dpidmd5 = dpidmd5;
    }

    // ipv6

    public String getIpv6() {
        return ipv6;
    }

    public void setIpv6(String ipv6) {
        this.ipv6 = ipv6;
    }

    // carrier

    public String getCarrier() {
        return carrier;
    }

    public void setCarrier(String carrier) {
        this.carrier = carrier;
    }

    // language

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        this.language = language;
    }

    // make

    public String getMake() {
        return make;
    }

    public void setMake(String make) {
        this.make = make;
    }

    // model

    public String getModel() {
        return model;
    }

    public void setModel(String model) {
        this.model = model;
    }

    // os

    public String getOs() {
        return os;
    }

    public void setOs(String os) {
        this.os = os;
    }

    // osv

    public String getOsv() {
        return osv;
    }

    public void setOsv(String osv) {
        this.osv = osv;
    }

    // js

    public Bool getJs() {
        return js == null ? Bool.FALSE : js;
    }

    public void setJs(Bool js) {
        this.js = js;
    }

    // connectiontype

    public ConnectionType getConnectiontype() {
        return connectiontype == null ? ConnectionType.CONNECTION_TYPE_UNKNOWN : connectiontype;
    }

    public void setConnectiontype(ConnectionType connectiontype) {
        this.connectiontype = connectiontype;
    }

    // devicetype

    public Integer getDevicetype() {
        return devicetype;
    }

    public void setDevicetype(Integer devicetype) {
        this.devicetype = devicetype;
    }

    // flashver

    public String getFlashver() {
        return flashver;
    }

    public void setFlashver(String flashver) {
        this.flashver = flashver;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Device> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Device> SCHEMA = new Schema<Device>() {
        // schema methods

        public Device newMessage() {
            return new Device();
        }

        public Class<Device> typeClass() {
            return Device.class;
        }

        public String messageName() {
            return Device.class.getSimpleName();
        }

        public String messageFullName() {
            return Device.class.getName();
        }

        public boolean isInitialized(Device message) {
            return true;
        }

        public void mergeFrom(Input input, Device message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.dnt = Bool.valueOf(input.readEnum());
                        break;
                    case 2:
                        message.ua = input.readString();
                        break;
                    case 3:
                        message.ip = input.readString();
                        break;
                    case 4:
                        message.geo = input.mergeObject(message.geo, Geo.getSchema());
                        break;

                    case 5:
                        message.didsha1 = input.readString();
                        break;
                    case 6:
                        message.didmd5 = input.readString();
                        break;
                    case 7:
                        message.dpidsha1 = input.readString();
                        break;
                    case 8:
                        message.dpidmd5 = input.readString();
                        break;
                    case 9:
                        message.ipv6 = input.readString();
                        break;
                    case 10:
                        message.carrier = input.readString();
                        break;
                    case 11:
                        message.language = input.readString();
                        break;
                    case 12:
                        message.make = input.readString();
                        break;
                    case 13:
                        message.model = input.readString();
                        break;
                    case 14:
                        message.os = input.readString();
                        break;
                    case 15:
                        message.osv = input.readString();
                        break;
                    case 16:
                        message.js = Bool.valueOf(input.readEnum());
                        break;
                    case 17:
                        message.connectiontype = ConnectionType.valueOf(input.readEnum());
                        break;
                    case 18:
                        message.devicetype = input.readInt32();
                        break;
                    case 19:
                        message.flashver = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Device message) throws IOException {
            if (message.dnt != null)
                output.writeEnum(1, message.dnt.number, false);

            if (message.ua != null)
                output.writeString(2, message.ua, false);

            if (message.ip != null)
                output.writeString(3, message.ip, false);

            if (message.geo != null)
                output.writeObject(4, message.geo, Geo.getSchema(), false);


            if (message.didsha1 != null)
                output.writeString(5, message.didsha1, false);

            if (message.didmd5 != null)
                output.writeString(6, message.didmd5, false);

            if (message.dpidsha1 != null)
                output.writeString(7, message.dpidsha1, false);

            if (message.dpidmd5 != null)
                output.writeString(8, message.dpidmd5, false);

            if (message.ipv6 != null)
                output.writeString(9, message.ipv6, false);

            if (message.carrier != null)
                output.writeString(10, message.carrier, false);

            if (message.language != null)
                output.writeString(11, message.language, false);

            if (message.make != null)
                output.writeString(12, message.make, false);

            if (message.model != null)
                output.writeString(13, message.model, false);

            if (message.os != null)
                output.writeString(14, message.os, false);

            if (message.osv != null)
                output.writeString(15, message.osv, false);

            if (message.js != null)
                output.writeEnum(16, message.js.number, false);

            if (message.connectiontype != null)
                output.writeEnum(17, message.connectiontype.number, false);

            if (message.devicetype != null)
                output.writeInt32(18, message.devicetype, false);

            if (message.flashver != null)
                output.writeString(19, message.flashver, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "dnt";
                case 2:
                    return "ua";
                case 3:
                    return "ip";
                case 4:
                    return "geo";
                case 5:
                    return "didsha1";
                case 6:
                    return "didmd5";
                case 7:
                    return "dpidsha1";
                case 8:
                    return "dpidmd5";
                case 9:
                    return "ipv6";
                case 10:
                    return "carrier";
                case 11:
                    return "language";
                case 12:
                    return "make";
                case 13:
                    return "model";
                case 14:
                    return "os";
                case 15:
                    return "osv";
                case 16:
                    return "js";
                case 17:
                    return "connectiontype";
                case 18:
                    return "devicetype";
                case 19:
                    return "flashver";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("dnt", 1);
            fieldMap.put("ua", 2);
            fieldMap.put("ip", 3);
            fieldMap.put("geo", 4);
            fieldMap.put("didsha1", 5);
            fieldMap.put("didmd5", 6);
            fieldMap.put("dpidsha1", 7);
            fieldMap.put("dpidmd5", 8);
            fieldMap.put("ipv6", 9);
            fieldMap.put("carrier", 10);
            fieldMap.put("language", 11);
            fieldMap.put("make", 12);
            fieldMap.put("model", 13);
            fieldMap.put("os", 14);
            fieldMap.put("osv", 15);
            fieldMap.put("js", 16);
            fieldMap.put("connectiontype", 17);
            fieldMap.put("devicetype", 18);
            fieldMap.put("flashver", 19);
        }
    };

}
