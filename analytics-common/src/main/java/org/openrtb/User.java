// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class User implements Externalizable, Message<User> {

    public static Schema<User> getSchema() {
        return SCHEMA;
    }

    public static User getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final User DEFAULT_INSTANCE = new User();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String id;
    String buyerid;
    Integer yob;
    String gender;
    String keywords;
    Geo geo;
    List<Data> data;
    String customdata;

    public User() {

    }

    // getters and setters

    // id

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    // buyerid

    public String getBuyerid() {
        return buyerid;
    }

    public void setBuyerid(String buyerid) {
        this.buyerid = buyerid;
    }

    // yob

    public Integer getYob() {
        return yob;
    }

    public void setYob(Integer yob) {
        this.yob = yob;
    }

    // gender

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    // keywords

    public String getKeywords() {
        return keywords;
    }

    public void setKeywords(String keywords) {
        this.keywords = keywords;
    }

    // geo

    public Geo getGeo() {
        return geo;
    }

    public void setGeo(Geo geo) {
        this.geo = geo;
    }

    // data

    public List<Data> getDataList() {
        return data;
    }

    public void setDataList(List<Data> data) {
        this.data = data;
    }

    // customdata

    public String getCustomdata() {
        return customdata;
    }

    public void setCustomdata(String customdata) {
        this.customdata = customdata;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<User> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<User> SCHEMA = new Schema<User>() {
        // schema methods

        public User newMessage() {
            return new User();
        }

        public Class<User> typeClass() {
            return User.class;
        }

        public String messageName() {
            return User.class.getSimpleName();
        }

        public String messageFullName() {
            return User.class.getName();
        }

        public boolean isInitialized(User message) {
            return true;
        }

        public void mergeFrom(Input input, User message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readString();
                        break;
                    case 2:
                        message.buyerid = input.readString();
                        break;
                    case 3:
                        message.yob = input.readInt32();
                        break;
                    case 4:
                        message.gender = input.readString();
                        break;
                    case 5:
                        message.keywords = input.readString();
                        break;
                    case 6:
                        message.geo = input.mergeObject(message.geo, Geo.getSchema());
                        break;

                    case 7:
                        if (message.data == null)
                            message.data = new ArrayList<Data>();
                        message.data.add(input.mergeObject(null, Data.getSchema()));
                        break;

                    case 8:
                        message.customdata = input.readString();
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, User message) throws IOException {
            if (message.id != null)
                output.writeString(1, message.id, false);

            if (message.buyerid != null)
                output.writeString(2, message.buyerid, false);

            if (message.yob != null)
                output.writeInt32(3, message.yob, false);

            if (message.gender != null)
                output.writeString(4, message.gender, false);

            if (message.keywords != null)
                output.writeString(5, message.keywords, false);

            if (message.geo != null)
                output.writeObject(6, message.geo, Geo.getSchema(), false);


            if (message.data != null) {
                for (Data data : message.data) {
                    if (data != null)
                        output.writeObject(7, data, Data.getSchema(), true);
                }
            }


            if (message.customdata != null)
                output.writeString(8, message.customdata, false);
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "id";
                case 2:
                    return "buyerid";
                case 3:
                    return "yob";
                case 4:
                    return "gender";
                case 5:
                    return "keywords";
                case 6:
                    return "geo";
                case 7:
                    return "data";
                case 8:
                    return "customdata";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("id", 1);
            fieldMap.put("buyerid", 2);
            fieldMap.put("yob", 3);
            fieldMap.put("gender", 4);
            fieldMap.put("keywords", 5);
            fieldMap.put("geo", 6);
            fieldMap.put("data", 7);
            fieldMap.put("customdata", 8);
        }
    };

}
