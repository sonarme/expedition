// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from openrtb.proto

package org.openrtb;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public final class Banner implements Externalizable, Message<Banner> {

    public static Schema<Banner> getSchema() {
        return SCHEMA;
    }

    public static Banner getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    static final Banner DEFAULT_INSTANCE = new Banner();


    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    String id;
    Integer w;
    Integer h;
    AdPosition pos;
    List<CreativeType> btype;
    List<CreativeAttribute> battr;
    List<String> mimes;
    Bool topframe;
    List<ExpandableDirection> expdir;
    List<Integer> api;

    public Banner() {

    }

    public Banner(
            String id
    ) {
        this.id = id;
    }

    // getters and setters

    // id

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    // w

    public Integer getW() {
        return w;
    }

    public void setW(Integer w) {
        this.w = w;
    }

    // h

    public Integer getH() {
        return h;
    }

    public void setH(Integer h) {
        this.h = h;
    }

    // pos

    public AdPosition getPos() {
        return pos == null ? AdPosition.AD_POSITION_UNKNOWN : pos;
    }

    public void setPos(AdPosition pos) {
        this.pos = pos;
    }

    // btype

    public List<CreativeType> getBtypeList() {
        return btype;
    }

    public void setBtypeList(List<CreativeType> btype) {
        this.btype = btype;
    }

    // battr

    public List<CreativeAttribute> getBattrList() {
        return battr;
    }

    public void setBattrList(List<CreativeAttribute> battr) {
        this.battr = battr;
    }

    // mimes

    public List<String> getMimesList() {
        return mimes;
    }

    public void setMimesList(List<String> mimes) {
        this.mimes = mimes;
    }

    // topframe

    public Bool getTopframe() {
        return topframe == null ? Bool.FALSE : topframe;
    }

    public void setTopframe(Bool topframe) {
        this.topframe = topframe;
    }

    // expdir

    public List<ExpandableDirection> getExpdirList() {
        return expdir;
    }

    public void setExpdirList(List<ExpandableDirection> expdir) {
        this.expdir = expdir;
    }

    // api

    public List<Integer> getApiList() {
        return api;
    }

    public void setApiList(List<Integer> api) {
        this.api = api;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<Banner> cachedSchema() {
        return SCHEMA;
    }

    static final Schema<Banner> SCHEMA = new Schema<Banner>() {
        // schema methods

        public Banner newMessage() {
            return new Banner();
        }

        public Class<Banner> typeClass() {
            return Banner.class;
        }

        public String messageName() {
            return Banner.class.getSimpleName();
        }

        public String messageFullName() {
            return Banner.class.getName();
        }

        public boolean isInitialized(Banner message) {
            return
                    message.id != null;
        }

        public void mergeFrom(Input input, Banner message) throws IOException {
            for (int number = input.readFieldNumber(this); ; number = input.readFieldNumber(this)) {
                switch (number) {
                    case 0:
                        return;
                    case 1:
                        message.id = input.readString();
                        break;
                    case 2:
                        message.w = input.readInt32();
                        break;
                    case 3:
                        message.h = input.readInt32();
                        break;
                    case 4:
                        message.pos = AdPosition.valueOf(input.readEnum());
                        break;
                    case 5:
                        if (message.btype == null)
                            message.btype = new ArrayList<CreativeType>();
                        message.btype.add(CreativeType.valueOf(input.readEnum()));
                        break;
                    case 6:
                        if (message.battr == null)
                            message.battr = new ArrayList<CreativeAttribute>();
                        message.battr.add(CreativeAttribute.valueOf(input.readEnum()));
                        break;
                    case 7:
                        if (message.mimes == null)
                            message.mimes = new ArrayList<String>();
                        message.mimes.add(input.readString());
                        break;
                    case 8:
                        message.topframe = Bool.valueOf(input.readEnum());
                        break;
                    case 9:
                        if (message.expdir == null)
                            message.expdir = new ArrayList<ExpandableDirection>();
                        message.expdir.add(ExpandableDirection.valueOf(input.readEnum()));
                        break;
                    case 10:
                        if (message.api == null)
                            message.api = new ArrayList<Integer>();
                        message.api.add(input.readInt32());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }
            }
        }


        public void writeTo(Output output, Banner message) throws IOException {
            if (message.id == null)
                throw new UninitializedMessageException(message);
            output.writeString(1, message.id, false);

            if (message.w != null)
                output.writeInt32(2, message.w, false);

            if (message.h != null)
                output.writeInt32(3, message.h, false);

            if (message.pos != null)
                output.writeEnum(4, message.pos.number, false);

            if (message.btype != null) {
                for (CreativeType btype : message.btype) {
                    if (btype != null)
                        output.writeEnum(5, btype.number, true);
                }
            }

            if (message.battr != null) {
                for (CreativeAttribute battr : message.battr) {
                    if (battr != null)
                        output.writeEnum(6, battr.number, true);
                }
            }

            if (message.mimes != null) {
                for (String mimes : message.mimes) {
                    if (mimes != null)
                        output.writeString(7, mimes, true);
                }
            }

            if (message.topframe != null)
                output.writeEnum(8, message.topframe.number, false);

            if (message.expdir != null) {
                for (ExpandableDirection expdir : message.expdir) {
                    if (expdir != null)
                        output.writeEnum(9, expdir.number, true);
                }
            }

            if (message.api != null) {
                for (Integer api : message.api) {
                    if (api != null)
                        output.writeInt32(10, api, true);
                }
            }
        }

        public String getFieldName(int number) {
            switch (number) {
                case 1:
                    return "id";
                case 2:
                    return "w";
                case 3:
                    return "h";
                case 4:
                    return "pos";
                case 5:
                    return "btype";
                case 6:
                    return "battr";
                case 7:
                    return "mimes";
                case 8:
                    return "topframe";
                case 9:
                    return "expdir";
                case 10:
                    return "api";
                default:
                    return null;
            }
        }

        public int getFieldNumber(String name) {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String, Integer> fieldMap = new java.util.HashMap<String, Integer>();

        {
            fieldMap.put("id", 1);
            fieldMap.put("w", 2);
            fieldMap.put("h", 3);
            fieldMap.put("pos", 4);
            fieldMap.put("btype", 5);
            fieldMap.put("battr", 6);
            fieldMap.put("mimes", 7);
            fieldMap.put("topframe", 8);
            fieldMap.put("expdir", 9);
            fieldMap.put("api", 10);
        }
    };

}
